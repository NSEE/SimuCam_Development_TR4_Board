// MebX_Qsys_Project_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_0 (
		input  wire         clk_100_clk_clk,                                                 //                                               clk_100_clk.clk
		input  wire         m0_ddr3_memory_afi_clk_clk,                                      //                                    m0_ddr3_memory_afi_clk.clk
		input  wire         m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset, // m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         m0_ddr3_memory_soft_reset_reset_bridge_in_reset_reset,           //           m0_ddr3_memory_soft_reset_reset_bridge_in_reset.reset
		input  wire         Memory_Filler_reset_sink_reset_bridge_in_reset_reset,            //            Memory_Filler_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0]  ddr2_address_span_extender_expanded_master_address,              //                ddr2_address_span_extender_expanded_master.address
		output wire         ddr2_address_span_extender_expanded_master_waitrequest,          //                                                          .waitrequest
		input  wire [7:0]   ddr2_address_span_extender_expanded_master_burstcount,           //                                                          .burstcount
		input  wire [3:0]   ddr2_address_span_extender_expanded_master_byteenable,           //                                                          .byteenable
		input  wire         ddr2_address_span_extender_expanded_master_read,                 //                                                          .read
		output wire [31:0]  ddr2_address_span_extender_expanded_master_readdata,             //                                                          .readdata
		output wire         ddr2_address_span_extender_expanded_master_readdatavalid,        //                                                          .readdatavalid
		input  wire         ddr2_address_span_extender_expanded_master_write,                //                                                          .write
		input  wire [31:0]  ddr2_address_span_extender_expanded_master_writedata,            //                                                          .writedata
		input  wire [63:0]  Memory_Filler_avalon_master_data_address,                        //                          Memory_Filler_avalon_master_data.address
		output wire         Memory_Filler_avalon_master_data_waitrequest,                    //                                                          .waitrequest
		input  wire         Memory_Filler_avalon_master_data_write,                          //                                                          .write
		input  wire [255:0] Memory_Filler_avalon_master_data_writedata,                      //                                                          .writedata
		output wire [26:0]  m0_ddr3_memory_avl_address,                                      //                                        m0_ddr3_memory_avl.address
		output wire         m0_ddr3_memory_avl_write,                                        //                                                          .write
		output wire         m0_ddr3_memory_avl_read,                                         //                                                          .read
		input  wire [255:0] m0_ddr3_memory_avl_readdata,                                     //                                                          .readdata
		output wire [255:0] m0_ddr3_memory_avl_writedata,                                    //                                                          .writedata
		output wire         m0_ddr3_memory_avl_beginbursttransfer,                           //                                                          .beginbursttransfer
		output wire [3:0]   m0_ddr3_memory_avl_burstcount,                                   //                                                          .burstcount
		output wire [31:0]  m0_ddr3_memory_avl_byteenable,                                   //                                                          .byteenable
		input  wire         m0_ddr3_memory_avl_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m0_ddr3_memory_avl_waitrequest                                   //                                                          .waitrequest
	);

	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest;             // Memory_Filler_avalon_master_data_agent:av_waitrequest -> Memory_Filler_avalon_master_data_translator:uav_waitrequest
	wire  [255:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata;                // Memory_Filler_avalon_master_data_agent:av_readdata -> Memory_Filler_avalon_master_data_translator:uav_readdata
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess;             // Memory_Filler_avalon_master_data_translator:uav_debugaccess -> Memory_Filler_avalon_master_data_agent:av_debugaccess
	wire   [63:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_address;                 // Memory_Filler_avalon_master_data_translator:uav_address -> Memory_Filler_avalon_master_data_agent:av_address
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_read;                    // Memory_Filler_avalon_master_data_translator:uav_read -> Memory_Filler_avalon_master_data_agent:av_read
	wire   [31:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable;              // Memory_Filler_avalon_master_data_translator:uav_byteenable -> Memory_Filler_avalon_master_data_agent:av_byteenable
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid;           // Memory_Filler_avalon_master_data_agent:av_readdatavalid -> Memory_Filler_avalon_master_data_translator:uav_readdatavalid
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock;                    // Memory_Filler_avalon_master_data_translator:uav_lock -> Memory_Filler_avalon_master_data_agent:av_lock
	wire          memory_filler_avalon_master_data_translator_avalon_universal_master_0_write;                   // Memory_Filler_avalon_master_data_translator:uav_write -> Memory_Filler_avalon_master_data_agent:av_write
	wire  [255:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata;               // Memory_Filler_avalon_master_data_translator:uav_writedata -> Memory_Filler_avalon_master_data_agent:av_writedata
	wire    [5:0] memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount;              // Memory_Filler_avalon_master_data_translator:uav_burstcount -> Memory_Filler_avalon_master_data_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                             // rsp_mux:src_valid -> Memory_Filler_avalon_master_data_agent:rp_valid
	wire  [392:0] rsp_mux_src_data;                                                                              // rsp_mux:src_data -> Memory_Filler_avalon_master_data_agent:rp_data
	wire          rsp_mux_src_ready;                                                                             // Memory_Filler_avalon_master_data_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                                           // rsp_mux:src_channel -> Memory_Filler_avalon_master_data_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                     // rsp_mux:src_startofpacket -> Memory_Filler_avalon_master_data_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                       // rsp_mux:src_endofpacket -> Memory_Filler_avalon_master_data_agent:rp_endofpacket
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest;   // ddr2_address_span_extender_expanded_master_agent:av_waitrequest -> ddr2_address_span_extender_expanded_master_translator:uav_waitrequest
	wire   [31:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata;      // ddr2_address_span_extender_expanded_master_agent:av_readdata -> ddr2_address_span_extender_expanded_master_translator:uav_readdata
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess;   // ddr2_address_span_extender_expanded_master_translator:uav_debugaccess -> ddr2_address_span_extender_expanded_master_agent:av_debugaccess
	wire   [63:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address;       // ddr2_address_span_extender_expanded_master_translator:uav_address -> ddr2_address_span_extender_expanded_master_agent:av_address
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read;          // ddr2_address_span_extender_expanded_master_translator:uav_read -> ddr2_address_span_extender_expanded_master_agent:av_read
	wire    [3:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable;    // ddr2_address_span_extender_expanded_master_translator:uav_byteenable -> ddr2_address_span_extender_expanded_master_agent:av_byteenable
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid; // ddr2_address_span_extender_expanded_master_agent:av_readdatavalid -> ddr2_address_span_extender_expanded_master_translator:uav_readdatavalid
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock;          // ddr2_address_span_extender_expanded_master_translator:uav_lock -> ddr2_address_span_extender_expanded_master_agent:av_lock
	wire          ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write;         // ddr2_address_span_extender_expanded_master_translator:uav_write -> ddr2_address_span_extender_expanded_master_agent:av_write
	wire   [31:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata;     // ddr2_address_span_extender_expanded_master_translator:uav_writedata -> ddr2_address_span_extender_expanded_master_agent:av_writedata
	wire    [9:0] ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount;    // ddr2_address_span_extender_expanded_master_translator:uav_burstcount -> ddr2_address_span_extender_expanded_master_agent:av_burstcount
	wire  [255:0] m0_ddr3_memory_avl_agent_m0_readdata;                                                          // m0_ddr3_memory_avl_translator:uav_readdata -> m0_ddr3_memory_avl_agent:m0_readdata
	wire          m0_ddr3_memory_avl_agent_m0_waitrequest;                                                       // m0_ddr3_memory_avl_translator:uav_waitrequest -> m0_ddr3_memory_avl_agent:m0_waitrequest
	wire          m0_ddr3_memory_avl_agent_m0_debugaccess;                                                       // m0_ddr3_memory_avl_agent:m0_debugaccess -> m0_ddr3_memory_avl_translator:uav_debugaccess
	wire   [63:0] m0_ddr3_memory_avl_agent_m0_address;                                                           // m0_ddr3_memory_avl_agent:m0_address -> m0_ddr3_memory_avl_translator:uav_address
	wire   [31:0] m0_ddr3_memory_avl_agent_m0_byteenable;                                                        // m0_ddr3_memory_avl_agent:m0_byteenable -> m0_ddr3_memory_avl_translator:uav_byteenable
	wire          m0_ddr3_memory_avl_agent_m0_read;                                                              // m0_ddr3_memory_avl_agent:m0_read -> m0_ddr3_memory_avl_translator:uav_read
	wire          m0_ddr3_memory_avl_agent_m0_readdatavalid;                                                     // m0_ddr3_memory_avl_translator:uav_readdatavalid -> m0_ddr3_memory_avl_agent:m0_readdatavalid
	wire          m0_ddr3_memory_avl_agent_m0_lock;                                                              // m0_ddr3_memory_avl_agent:m0_lock -> m0_ddr3_memory_avl_translator:uav_lock
	wire  [255:0] m0_ddr3_memory_avl_agent_m0_writedata;                                                         // m0_ddr3_memory_avl_agent:m0_writedata -> m0_ddr3_memory_avl_translator:uav_writedata
	wire          m0_ddr3_memory_avl_agent_m0_write;                                                             // m0_ddr3_memory_avl_agent:m0_write -> m0_ddr3_memory_avl_translator:uav_write
	wire    [8:0] m0_ddr3_memory_avl_agent_m0_burstcount;                                                        // m0_ddr3_memory_avl_agent:m0_burstcount -> m0_ddr3_memory_avl_translator:uav_burstcount
	wire          m0_ddr3_memory_avl_agent_rf_source_valid;                                                      // m0_ddr3_memory_avl_agent:rf_source_valid -> m0_ddr3_memory_avl_agent_rsp_fifo:in_valid
	wire  [393:0] m0_ddr3_memory_avl_agent_rf_source_data;                                                       // m0_ddr3_memory_avl_agent:rf_source_data -> m0_ddr3_memory_avl_agent_rsp_fifo:in_data
	wire          m0_ddr3_memory_avl_agent_rf_source_ready;                                                      // m0_ddr3_memory_avl_agent_rsp_fifo:in_ready -> m0_ddr3_memory_avl_agent:rf_source_ready
	wire          m0_ddr3_memory_avl_agent_rf_source_startofpacket;                                              // m0_ddr3_memory_avl_agent:rf_source_startofpacket -> m0_ddr3_memory_avl_agent_rsp_fifo:in_startofpacket
	wire          m0_ddr3_memory_avl_agent_rf_source_endofpacket;                                                // m0_ddr3_memory_avl_agent:rf_source_endofpacket -> m0_ddr3_memory_avl_agent_rsp_fifo:in_endofpacket
	wire          m0_ddr3_memory_avl_agent_rsp_fifo_out_valid;                                                   // m0_ddr3_memory_avl_agent_rsp_fifo:out_valid -> m0_ddr3_memory_avl_agent:rf_sink_valid
	wire  [393:0] m0_ddr3_memory_avl_agent_rsp_fifo_out_data;                                                    // m0_ddr3_memory_avl_agent_rsp_fifo:out_data -> m0_ddr3_memory_avl_agent:rf_sink_data
	wire          m0_ddr3_memory_avl_agent_rsp_fifo_out_ready;                                                   // m0_ddr3_memory_avl_agent:rf_sink_ready -> m0_ddr3_memory_avl_agent_rsp_fifo:out_ready
	wire          m0_ddr3_memory_avl_agent_rsp_fifo_out_startofpacket;                                           // m0_ddr3_memory_avl_agent_rsp_fifo:out_startofpacket -> m0_ddr3_memory_avl_agent:rf_sink_startofpacket
	wire          m0_ddr3_memory_avl_agent_rsp_fifo_out_endofpacket;                                             // m0_ddr3_memory_avl_agent_rsp_fifo:out_endofpacket -> m0_ddr3_memory_avl_agent:rf_sink_endofpacket
	wire          m0_ddr3_memory_avl_agent_rdata_fifo_src_valid;                                                 // m0_ddr3_memory_avl_agent:rdata_fifo_src_valid -> m0_ddr3_memory_avl_agent_rdata_fifo:in_valid
	wire  [257:0] m0_ddr3_memory_avl_agent_rdata_fifo_src_data;                                                  // m0_ddr3_memory_avl_agent:rdata_fifo_src_data -> m0_ddr3_memory_avl_agent_rdata_fifo:in_data
	wire          m0_ddr3_memory_avl_agent_rdata_fifo_src_ready;                                                 // m0_ddr3_memory_avl_agent_rdata_fifo:in_ready -> m0_ddr3_memory_avl_agent:rdata_fifo_src_ready
	wire          memory_filler_avalon_master_data_agent_cp_valid;                                               // Memory_Filler_avalon_master_data_agent:cp_valid -> router:sink_valid
	wire  [392:0] memory_filler_avalon_master_data_agent_cp_data;                                                // Memory_Filler_avalon_master_data_agent:cp_data -> router:sink_data
	wire          memory_filler_avalon_master_data_agent_cp_ready;                                               // router:sink_ready -> Memory_Filler_avalon_master_data_agent:cp_ready
	wire          memory_filler_avalon_master_data_agent_cp_startofpacket;                                       // Memory_Filler_avalon_master_data_agent:cp_startofpacket -> router:sink_startofpacket
	wire          memory_filler_avalon_master_data_agent_cp_endofpacket;                                         // Memory_Filler_avalon_master_data_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                              // router:src_valid -> cmd_demux:sink_valid
	wire  [392:0] router_src_data;                                                                               // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                              // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                            // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                      // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                        // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ddr2_address_span_extender_expanded_master_agent_cp_valid;                                     // ddr2_address_span_extender_expanded_master_agent:cp_valid -> router_001:sink_valid
	wire  [140:0] ddr2_address_span_extender_expanded_master_agent_cp_data;                                      // ddr2_address_span_extender_expanded_master_agent:cp_data -> router_001:sink_data
	wire          ddr2_address_span_extender_expanded_master_agent_cp_ready;                                     // router_001:sink_ready -> ddr2_address_span_extender_expanded_master_agent:cp_ready
	wire          ddr2_address_span_extender_expanded_master_agent_cp_startofpacket;                             // ddr2_address_span_extender_expanded_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          ddr2_address_span_extender_expanded_master_agent_cp_endofpacket;                               // ddr2_address_span_extender_expanded_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          m0_ddr3_memory_avl_agent_rp_valid;                                                             // m0_ddr3_memory_avl_agent:rp_valid -> router_002:sink_valid
	wire  [392:0] m0_ddr3_memory_avl_agent_rp_data;                                                              // m0_ddr3_memory_avl_agent:rp_data -> router_002:sink_data
	wire          m0_ddr3_memory_avl_agent_rp_ready;                                                             // router_002:sink_ready -> m0_ddr3_memory_avl_agent:rp_ready
	wire          m0_ddr3_memory_avl_agent_rp_startofpacket;                                                     // m0_ddr3_memory_avl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          m0_ddr3_memory_avl_agent_rp_endofpacket;                                                       // m0_ddr3_memory_avl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                          // router_002:src_valid -> rsp_demux:sink_valid
	wire  [392:0] router_002_src_data;                                                                           // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                          // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                                        // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                                  // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                    // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                             // cmd_mux:src_valid -> m0_ddr3_memory_avl_burst_adapter:sink0_valid
	wire  [392:0] cmd_mux_src_data;                                                                              // cmd_mux:src_data -> m0_ddr3_memory_avl_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                             // m0_ddr3_memory_avl_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                                           // cmd_mux:src_channel -> m0_ddr3_memory_avl_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                     // cmd_mux:src_startofpacket -> m0_ddr3_memory_avl_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                       // cmd_mux:src_endofpacket -> m0_ddr3_memory_avl_burst_adapter:sink0_endofpacket
	wire          m0_ddr3_memory_avl_burst_adapter_source0_valid;                                                // m0_ddr3_memory_avl_burst_adapter:source0_valid -> m0_ddr3_memory_avl_agent:cp_valid
	wire  [392:0] m0_ddr3_memory_avl_burst_adapter_source0_data;                                                 // m0_ddr3_memory_avl_burst_adapter:source0_data -> m0_ddr3_memory_avl_agent:cp_data
	wire          m0_ddr3_memory_avl_burst_adapter_source0_ready;                                                // m0_ddr3_memory_avl_agent:cp_ready -> m0_ddr3_memory_avl_burst_adapter:source0_ready
	wire    [1:0] m0_ddr3_memory_avl_burst_adapter_source0_channel;                                              // m0_ddr3_memory_avl_burst_adapter:source0_channel -> m0_ddr3_memory_avl_agent:cp_channel
	wire          m0_ddr3_memory_avl_burst_adapter_source0_startofpacket;                                        // m0_ddr3_memory_avl_burst_adapter:source0_startofpacket -> m0_ddr3_memory_avl_agent:cp_startofpacket
	wire          m0_ddr3_memory_avl_burst_adapter_source0_endofpacket;                                          // m0_ddr3_memory_avl_burst_adapter:source0_endofpacket -> m0_ddr3_memory_avl_agent:cp_endofpacket
	wire          rsp_mux_001_src_valid;                                                                         // rsp_mux_001:src_valid -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_valid
	wire  [392:0] rsp_mux_001_src_data;                                                                          // rsp_mux_001:src_data -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                                         // ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                                       // rsp_mux_001:src_channel -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                                                 // rsp_mux_001:src_startofpacket -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                   // rsp_mux_001:src_endofpacket -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid;                        // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_valid -> ddr2_address_span_extender_expanded_master_agent:rp_valid
	wire  [140:0] ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data;                         // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_data -> ddr2_address_span_extender_expanded_master_agent:rp_data
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready;                        // ddr2_address_span_extender_expanded_master_agent:rp_ready -> ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_ready
	wire    [1:0] ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel;                      // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_channel -> ddr2_address_span_extender_expanded_master_agent:rp_channel
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket;                // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_startofpacket -> ddr2_address_span_extender_expanded_master_agent:rp_startofpacket
	wire          ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket;                  // ddr2_address_span_extender_expanded_master_rsp_width_adapter:out_endofpacket -> ddr2_address_span_extender_expanded_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                          // router_001:src_valid -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_valid
	wire  [140:0] router_001_src_data;                                                                           // router_001:src_data -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                                          // ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                                        // router_001:src_channel -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                                  // router_001:src_startofpacket -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                                    // router_001:src_endofpacket -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:in_endofpacket
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid;                        // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [392:0] ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data;                         // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready;                        // cmd_demux_001:sink_ready -> ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_ready
	wire    [1:0] ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel;                      // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket;                // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket;                  // ddr2_address_span_extender_expanded_master_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                          // cmd_demux:src0_valid -> crosser:in_valid
	wire  [392:0] cmd_demux_src0_data;                                                                           // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                          // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                                        // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                  // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                    // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                             // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [392:0] crosser_out_data;                                                                              // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                             // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                                                           // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                     // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                       // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                      // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [392:0] cmd_demux_001_src0_data;                                                                       // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                                                      // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                                    // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                              // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                         // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [392:0] crosser_001_out_data;                                                                          // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                                         // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                                                       // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                                                 // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                                   // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                          // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [392:0] rsp_demux_src0_data;                                                                           // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                                                          // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                                        // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                  // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                    // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                         // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [392:0] crosser_002_out_data;                                                                          // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                                                         // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                                                       // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                 // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                   // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                          // rsp_demux:src1_valid -> crosser_003:in_valid
	wire  [392:0] rsp_demux_src1_data;                                                                           // rsp_demux:src1_data -> crosser_003:in_data
	wire          rsp_demux_src1_ready;                                                                          // crosser_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                                        // rsp_demux:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                  // rsp_demux:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                    // rsp_demux:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                         // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [392:0] crosser_003_out_data;                                                                          // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                                                         // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                                                       // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                 // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                   // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          m0_ddr3_memory_avl_agent_rdata_fifo_out_valid;                                                 // m0_ddr3_memory_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] m0_ddr3_memory_avl_agent_rdata_fifo_out_data;                                                  // m0_ddr3_memory_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          m0_ddr3_memory_avl_agent_rdata_fifo_out_ready;                                                 // avalon_st_adapter:in_0_ready -> m0_ddr3_memory_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                 // avalon_st_adapter:out_0_valid -> m0_ddr3_memory_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                                  // avalon_st_adapter:out_0_data -> m0_ddr3_memory_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                 // m0_ddr3_memory_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                 // avalon_st_adapter:out_0_error -> m0_ddr3_memory_avl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) memory_filler_avalon_master_data_translator (
		.clk                    (clk_100_clk_clk),                                                                     //                       clk.clk
		.reset                  (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (memory_filler_avalon_master_data_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (memory_filler_avalon_master_data_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Memory_Filler_avalon_master_data_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Memory_Filler_avalon_master_data_waitrequest),                                        //                          .waitrequest
		.av_write               (Memory_Filler_avalon_master_data_write),                                              //                          .write
		.av_writedata           (Memory_Filler_avalon_master_data_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_read                (1'b0),                                                                                //               (terminated)
		.av_readdata            (),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ddr2_address_span_extender_expanded_master_translator (
		.clk                    (clk_100_clk_clk),                                                                               //                       clk.clk
		.reset                  (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ddr2_address_span_extender_expanded_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ddr2_address_span_extender_expanded_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (ddr2_address_span_extender_expanded_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (ddr2_address_span_extender_expanded_master_byteenable),                                         //                          .byteenable
		.av_read                (ddr2_address_span_extender_expanded_master_read),                                               //                          .read
		.av_readdata            (ddr2_address_span_extender_expanded_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (ddr2_address_span_extender_expanded_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (ddr2_address_span_extender_expanded_master_write),                                              //                          .write
		.av_writedata           (ddr2_address_span_extender_expanded_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                                          //               (terminated)
		.uav_clken              (),                                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                                         //               (terminated)
		.av_response            (),                                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m0_ddr3_memory_avl_translator (
		.clk                    (m0_ddr3_memory_afi_clk_clk),                                      //                      clk.clk
		.reset                  (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m0_ddr3_memory_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (m0_ddr3_memory_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (m0_ddr3_memory_avl_agent_m0_read),                                //                         .read
		.uav_write              (m0_ddr3_memory_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (m0_ddr3_memory_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (m0_ddr3_memory_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (m0_ddr3_memory_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (m0_ddr3_memory_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (m0_ddr3_memory_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (m0_ddr3_memory_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (m0_ddr3_memory_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (m0_ddr3_memory_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (m0_ddr3_memory_avl_write),                                        //                         .write
		.av_read                (m0_ddr3_memory_avl_read),                                         //                         .read
		.av_readdata            (m0_ddr3_memory_avl_readdata),                                     //                         .readdata
		.av_writedata           (m0_ddr3_memory_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (m0_ddr3_memory_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (m0_ddr3_memory_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (m0_ddr3_memory_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (m0_ddr3_memory_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (m0_ddr3_memory_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (392),
		.PKT_ORI_BURST_SIZE_L      (390),
		.PKT_RESPONSE_STATUS_H     (389),
		.PKT_RESPONSE_STATUS_L     (388),
		.PKT_QOS_H                 (377),
		.PKT_QOS_L                 (377),
		.PKT_DATA_SIDEBAND_H       (375),
		.PKT_DATA_SIDEBAND_L       (375),
		.PKT_ADDR_SIDEBAND_H       (374),
		.PKT_ADDR_SIDEBAND_L       (374),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_CACHE_H               (387),
		.PKT_CACHE_L               (384),
		.PKT_THREAD_ID_H           (380),
		.PKT_THREAD_ID_L           (380),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (383),
		.PKT_PROTECTION_L          (381),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (378),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (379),
		.PKT_DEST_ID_L             (379),
		.ST_DATA_W                 (393),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) memory_filler_avalon_master_data_agent (
		.clk                   (clk_100_clk_clk),                                                                     //       clk.clk
		.reset                 (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (memory_filler_avalon_master_data_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (memory_filler_avalon_master_data_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (memory_filler_avalon_master_data_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (memory_filler_avalon_master_data_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (memory_filler_avalon_master_data_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (memory_filler_avalon_master_data_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (memory_filler_avalon_master_data_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (memory_filler_avalon_master_data_agent_cp_valid),                                     //        cp.valid
		.cp_data               (memory_filler_avalon_master_data_agent_cp_data),                                      //          .data
		.cp_startofpacket      (memory_filler_avalon_master_data_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (memory_filler_avalon_master_data_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (memory_filler_avalon_master_data_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (140),
		.PKT_ORI_BURST_SIZE_L      (138),
		.PKT_RESPONSE_STATUS_H     (137),
		.PKT_RESPONSE_STATUS_L     (136),
		.PKT_QOS_H                 (125),
		.PKT_QOS_L                 (125),
		.PKT_DATA_SIDEBAND_H       (123),
		.PKT_DATA_SIDEBAND_L       (123),
		.PKT_ADDR_SIDEBAND_H       (122),
		.PKT_ADDR_SIDEBAND_L       (122),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_CACHE_H               (135),
		.PKT_CACHE_L               (132),
		.PKT_THREAD_ID_H           (128),
		.PKT_THREAD_ID_L           (128),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (131),
		.PKT_PROTECTION_L          (129),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (127),
		.PKT_DEST_ID_L             (127),
		.ST_DATA_W                 (141),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ddr2_address_span_extender_expanded_master_agent (
		.clk                   (clk_100_clk_clk),                                                                               //       clk.clk
		.reset                 (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ddr2_address_span_extender_expanded_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ddr2_address_span_extender_expanded_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ddr2_address_span_extender_expanded_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ddr2_address_span_extender_expanded_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ddr2_address_span_extender_expanded_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ddr2_address_span_extender_expanded_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (392),
		.PKT_ORI_BURST_SIZE_L      (390),
		.PKT_RESPONSE_STATUS_H     (389),
		.PKT_RESPONSE_STATUS_L     (388),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (383),
		.PKT_PROTECTION_L          (381),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (378),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (379),
		.PKT_DEST_ID_L             (379),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (393),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m0_ddr3_memory_avl_agent (
		.clk                     (m0_ddr3_memory_afi_clk_clk),                                      //             clk.clk
		.reset                   (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m0_ddr3_memory_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (m0_ddr3_memory_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (m0_ddr3_memory_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (m0_ddr3_memory_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (m0_ddr3_memory_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (m0_ddr3_memory_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (m0_ddr3_memory_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (m0_ddr3_memory_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (m0_ddr3_memory_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (m0_ddr3_memory_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (m0_ddr3_memory_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (m0_ddr3_memory_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (m0_ddr3_memory_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (m0_ddr3_memory_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (m0_ddr3_memory_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (m0_ddr3_memory_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (m0_ddr3_memory_avl_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (m0_ddr3_memory_avl_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (m0_ddr3_memory_avl_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (m0_ddr3_memory_avl_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (m0_ddr3_memory_avl_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (m0_ddr3_memory_avl_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (m0_ddr3_memory_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (m0_ddr3_memory_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (m0_ddr3_memory_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (m0_ddr3_memory_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (m0_ddr3_memory_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (m0_ddr3_memory_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (m0_ddr3_memory_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (m0_ddr3_memory_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (m0_ddr3_memory_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (m0_ddr3_memory_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (m0_ddr3_memory_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m0_ddr3_memory_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (m0_ddr3_memory_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (394),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m0_ddr3_memory_avl_agent_rsp_fifo (
		.clk               (m0_ddr3_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m0_ddr3_memory_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (m0_ddr3_memory_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (m0_ddr3_memory_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (m0_ddr3_memory_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (m0_ddr3_memory_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (m0_ddr3_memory_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (m0_ddr3_memory_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (m0_ddr3_memory_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (m0_ddr3_memory_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (m0_ddr3_memory_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m0_ddr3_memory_avl_agent_rdata_fifo (
		.clk               (m0_ddr3_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m0_ddr3_memory_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (m0_ddr3_memory_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (m0_ddr3_memory_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (m0_ddr3_memory_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (m0_ddr3_memory_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (m0_ddr3_memory_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_router router (
		.sink_ready         (memory_filler_avalon_master_data_agent_cp_ready),         //      sink.ready
		.sink_valid         (memory_filler_avalon_master_data_agent_cp_valid),         //          .valid
		.sink_data          (memory_filler_avalon_master_data_agent_cp_data),          //          .data
		.sink_startofpacket (memory_filler_avalon_master_data_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (memory_filler_avalon_master_data_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (ddr2_address_span_extender_expanded_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ddr2_address_span_extender_expanded_master_agent_cp_valid),         //          .valid
		.sink_data          (ddr2_address_span_extender_expanded_master_agent_cp_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_expanded_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_expanded_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                   //       clk.clk
		.reset              (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //       src.ready
		.src_valid          (router_001_src_valid),                                              //          .valid
		.src_data           (router_001_src_data),                                               //          .data
		.src_channel        (router_001_src_channel),                                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (m0_ddr3_memory_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (m0_ddr3_memory_avl_agent_rp_valid),                               //          .valid
		.sink_data          (m0_ddr3_memory_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (m0_ddr3_memory_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (m0_ddr3_memory_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (m0_ddr3_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (376),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (393),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (366),
		.OUT_BURSTWRAP_H           (368),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) m0_ddr3_memory_avl_burst_adapter (
		.clk                   (m0_ddr3_memory_afi_clk_clk),                                      //       cr0.clk
		.reset                 (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (m0_ddr3_memory_avl_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (m0_ddr3_memory_avl_burst_adapter_source0_data),                   //          .data
		.source0_channel       (m0_ddr3_memory_avl_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (m0_ddr3_memory_avl_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (m0_ddr3_memory_avl_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (m0_ddr3_memory_avl_burst_adapter_source0_ready)                   //          .ready
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_100_clk_clk),                                      //       clk.clk
		.reset              (Memory_Filler_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                     //      sink.ready
		.sink_channel       (router_src_channel),                                   //          .channel
		.sink_data          (router_src_data),                                      //          .data
		.sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_src_valid),                                     //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                 //          .valid
		.src0_data          (cmd_demux_src0_data),                                  //          .data
		.src0_channel       (cmd_demux_src0_channel),                               //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_100_clk_clk),                                                                //       clk.clk
		.reset              (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.sink_ready         (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (m0_ddr3_memory_afi_clk_clk),                                      //       clk.clk
		.reset               (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                               //          .valid
		.sink0_channel       (crosser_out_channel),                                             //          .channel
		.sink0_data          (crosser_out_data),                                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                           //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                           //          .valid
		.sink1_channel       (crosser_001_out_channel),                                         //          .channel
		.sink1_data          (crosser_001_out_data),                                            //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (m0_ddr3_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //      sink.ready
		.sink_channel       (router_002_src_channel),                                          //          .channel
		.sink_data          (router_002_src_data),                                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                            //          .valid
		.src1_data          (rsp_demux_src1_data),                                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_100_clk_clk),                                      //       clk.clk
		.reset               (Memory_Filler_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                    //       src.ready
		.src_valid           (rsp_mux_src_valid),                                    //          .valid
		.src_data            (rsp_mux_src_data),                                     //          .data
		.src_channel         (rsp_mux_src_channel),                                  //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                //          .valid
		.sink0_channel       (crosser_002_out_channel),                              //          .channel
		.sink0_data          (crosser_002_out_data),                                 //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                                      //       clk.clk
		.reset               (Memory_Filler_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                //          .valid
		.src_data            (rsp_mux_001_src_data),                                 //          .data
		.src_channel         (rsp_mux_001_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                //          .valid
		.sink0_channel       (crosser_003_out_channel),                              //          .channel
		.sink0_data          (crosser_003_out_data),                                 //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (367),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (368),
		.IN_PKT_BURSTWRAP_L            (368),
		.IN_PKT_BURST_SIZE_H           (371),
		.IN_PKT_BURST_SIZE_L           (369),
		.IN_PKT_RESPONSE_STATUS_H      (389),
		.IN_PKT_RESPONSE_STATUS_L      (388),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (373),
		.IN_PKT_BURST_TYPE_L           (372),
		.IN_PKT_ORI_BURST_SIZE_L       (390),
		.IN_PKT_ORI_BURST_SIZE_H       (392),
		.IN_ST_DATA_W                  (393),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (137),
		.OUT_PKT_RESPONSE_STATUS_L     (136),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (138),
		.OUT_PKT_ORI_BURST_SIZE_H      (140),
		.OUT_ST_DATA_W                 (141),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_expanded_master_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                //       clk.clk
		.reset                (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                                          //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                                        //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                                          //          .ready
		.in_data              (rsp_mux_001_src_data),                                                           //          .data
		.out_endofpacket      (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_expanded_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (137),
		.IN_PKT_RESPONSE_STATUS_L      (136),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (138),
		.IN_PKT_ORI_BURST_SIZE_H       (140),
		.IN_ST_DATA_W                  (141),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (367),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (371),
		.OUT_PKT_BURST_SIZE_L          (369),
		.OUT_PKT_RESPONSE_STATUS_H     (389),
		.OUT_PKT_RESPONSE_STATUS_L     (388),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (373),
		.OUT_PKT_BURST_TYPE_L          (372),
		.OUT_PKT_ORI_BURST_SIZE_L      (390),
		.OUT_PKT_ORI_BURST_SIZE_H      (392),
		.OUT_ST_DATA_W                 (393),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_address_span_extender_expanded_master_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                                //       clk.clk
		.reset                (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                           //      sink.valid
		.in_channel           (router_001_src_channel),                                                         //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                                     //          .endofpacket
		.in_ready             (router_001_src_ready),                                                           //          .ready
		.in_data              (router_001_src_data),                                                            //          .data
		.out_endofpacket      (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_address_span_extender_expanded_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (393),
		.BITS_PER_SYMBOL     (393),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (m0_ddr3_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (393),
		.BITS_PER_SYMBOL     (393),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (m0_ddr3_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src0_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                           //           out.ready
		.out_valid         (crosser_001_out_valid),                                           //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                         //              .channel
		.out_data          (crosser_001_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (393),
		.BITS_PER_SYMBOL     (393),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (m0_ddr3_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_src0_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                           //           out.ready
		.out_valid         (crosser_002_out_valid),                                           //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                         //              .channel
		.out_data          (crosser_002_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (393),
		.BITS_PER_SYMBOL     (393),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (m0_ddr3_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (Memory_Filler_reset_sink_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_src1_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                           //           out.ready
		.out_valid         (crosser_003_out_valid),                                           //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                         //              .channel
		.out_data          (crosser_003_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (m0_ddr3_memory_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (m0_ddr3_memory_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m0_ddr3_memory_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (m0_ddr3_memory_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (m0_ddr3_memory_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

endmodule
