// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: scfifo 

// ============================================================
// File Name: send_buffer_1_sc_fifo.v
// Megafunction Name(s):
// 			scfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Standard Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//scfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALMOST_EMPTY_VALUE=2 ALMOST_FULL_VALUE=32766 DEVICE_FAMILY="Stratix IV" LPM_NUMWORDS=32768 LPM_SHOWAHEAD="OFF" LPM_WIDTH=8 LPM_WIDTHU=15 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M144K" UNDERFLOW_CHECKING="ON" USE_EAB="ON" aclr almost_empty almost_full clock data empty full q rdreq sclr usedw wrreq INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=M144K"
//VERSION_BEGIN 18.1 cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_dpfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Stratix IV" LPM_NUMWORDS=32768 LPM_SHOWAHEAD="OFF" lpm_width=8 lpm_widthu=15 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data empty full q rreq sclr usedw wreq INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=M144K"
//VERSION_BEGIN 18.1 cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//a_fefifo ALLOW_RWCYCLE_WHEN_FULL="OFF" LPM_NUMWORDS=32768 lpm_widthad=15 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock empty full rreq sclr usedw_out wreq
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_counter DEVICE_FAMILY="Stratix IV" lpm_width=15 aclr clock cnt_en q sclr updown
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 15 reg 15 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_cntr
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr,
	updown) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [14:0]  q;
	input   sclr;
	input   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
	tri1   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[14:0]	wire_counter_reg_bit_d;
	wire	[14:0]	wire_counter_reg_bit_asdata;
	reg	[14:0]	counter_reg_bit;
	wire	[14:0]	wire_counter_reg_bit_ena;
	wire	[14:0]	wire_counter_reg_bit_sload;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_7cout;
	wire  [0:0]   wire_counter_comb_bita_8cout;
	wire  [0:0]   wire_counter_comb_bita_9cout;
	wire  [0:0]   wire_counter_comb_bita_10cout;
	wire  [0:0]   wire_counter_comb_bita_11cout;
	wire  [0:0]   wire_counter_comb_bita_12cout;
	wire  [0:0]   wire_counter_comb_bita_13cout;
	wire  [0:0]   wire_counter_comb_bita_0sumout;
	wire  [0:0]   wire_counter_comb_bita_1sumout;
	wire  [0:0]   wire_counter_comb_bita_2sumout;
	wire  [0:0]   wire_counter_comb_bita_3sumout;
	wire  [0:0]   wire_counter_comb_bita_4sumout;
	wire  [0:0]   wire_counter_comb_bita_5sumout;
	wire  [0:0]   wire_counter_comb_bita_6sumout;
	wire  [0:0]   wire_counter_comb_bita_7sumout;
	wire  [0:0]   wire_counter_comb_bita_8sumout;
	wire  [0:0]   wire_counter_comb_bita_9sumout;
	wire  [0:0]   wire_counter_comb_bita_10sumout;
	wire  [0:0]   wire_counter_comb_bita_11sumout;
	wire  [0:0]   wire_counter_comb_bita_12sumout;
	wire  [0:0]   wire_counter_comb_bita_13sumout;
	wire  [0:0]   wire_counter_comb_bita_14sumout;
	wire  aclr_actual;
	wire clk_en;
	wire [14:0]  data;
	wire  external_cin;
	wire  lsb_cin;
	wire  [14:0]  s_val;
	wire  [14:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;
	wire  updown_lsb;
	wire  updown_other_bits;

	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[0:0] <= 1'b0;
			else if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[1:1] <= 1'b0;
			else if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[2:2] <= 1'b0;
			else if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[3:3] <= 1'b0;
			else if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[4:4] <= 1'b0;
			else if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[5:5] <= 1'b0;
			else if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[6:6] <= 1'b0;
			else if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[7:7] <= 1'b0;
			else if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	// synopsys translate_off
	initial
		counter_reg_bit[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[8:8] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[8:8] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[8:8] <= 1'b0;
			else if (wire_counter_reg_bit_sload[8:8] == 1'b1) counter_reg_bit[8:8] <= wire_counter_reg_bit_asdata[8:8];
			else  counter_reg_bit[8:8] <= wire_counter_reg_bit_d[8:8];
	// synopsys translate_off
	initial
		counter_reg_bit[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[9:9] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[9:9] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[9:9] <= 1'b0;
			else if (wire_counter_reg_bit_sload[9:9] == 1'b1) counter_reg_bit[9:9] <= wire_counter_reg_bit_asdata[9:9];
			else  counter_reg_bit[9:9] <= wire_counter_reg_bit_d[9:9];
	// synopsys translate_off
	initial
		counter_reg_bit[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[10:10] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[10:10] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[10:10] <= 1'b0;
			else if (wire_counter_reg_bit_sload[10:10] == 1'b1) counter_reg_bit[10:10] <= wire_counter_reg_bit_asdata[10:10];
			else  counter_reg_bit[10:10] <= wire_counter_reg_bit_d[10:10];
	// synopsys translate_off
	initial
		counter_reg_bit[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[11:11] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[11:11] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[11:11] <= 1'b0;
			else if (wire_counter_reg_bit_sload[11:11] == 1'b1) counter_reg_bit[11:11] <= wire_counter_reg_bit_asdata[11:11];
			else  counter_reg_bit[11:11] <= wire_counter_reg_bit_d[11:11];
	// synopsys translate_off
	initial
		counter_reg_bit[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[12:12] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[12:12] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[12:12] <= 1'b0;
			else if (wire_counter_reg_bit_sload[12:12] == 1'b1) counter_reg_bit[12:12] <= wire_counter_reg_bit_asdata[12:12];
			else  counter_reg_bit[12:12] <= wire_counter_reg_bit_d[12:12];
	// synopsys translate_off
	initial
		counter_reg_bit[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[13:13] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[13:13] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[13:13] <= 1'b0;
			else if (wire_counter_reg_bit_sload[13:13] == 1'b1) counter_reg_bit[13:13] <= wire_counter_reg_bit_asdata[13:13];
			else  counter_reg_bit[13:13] <= wire_counter_reg_bit_d[13:13];
	// synopsys translate_off
	initial
		counter_reg_bit[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[14:14] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[14:14] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[14:14] <= 1'b0;
			else if (wire_counter_reg_bit_sload[14:14] == 1'b1) counter_reg_bit[14:14] <= wire_counter_reg_bit_asdata[14:14];
			else  counter_reg_bit[14:14] <= wire_counter_reg_bit_d[14:14];
	assign
		wire_counter_reg_bit_asdata = (({15{sset}} & s_val) | ({15{(~ sset)}} & data)),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_14sumout[0:0], wire_counter_comb_bita_13sumout[0:0], wire_counter_comb_bita_12sumout[0:0], wire_counter_comb_bita_11sumout[0:0], wire_counter_comb_bita_10sumout[0:0], wire_counter_comb_bita_9sumout[0:0], wire_counter_comb_bita_8sumout[0:0], wire_counter_comb_bita_7sumout[0:0], wire_counter_comb_bita_6sumout[0:0], wire_counter_comb_bita_5sumout[0:0], wire_counter_comb_bita_4sumout[0:0], wire_counter_comb_bita_3sumout[0:0], wire_counter_comb_bita_2sumout[0:0], wire_counter_comb_bita_1sumout[0:0], wire_counter_comb_bita_0sumout[0:0]};
	assign
		wire_counter_reg_bit_ena = {15{(clk_en & (((cnt_en | sclr) | sset) | sload))}},
		wire_counter_reg_bit_sload = {15{(sset | sload)}};
	stratixiv_lcell_comb   counter_comb_bita_0
	( 
	.cin(lsb_cin),
	.combout(),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.datad(counter_reg_bit[0]),
	.dataf(updown_lsb),
	.shareout(),
	.sumout(wire_counter_comb_bita_0sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_0.extended_lut = "off",
		counter_comb_bita_0.lut_mask = 64'h000000000000FF00,
		counter_comb_bita_0.shared_arith = "off",
		counter_comb_bita_0.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.datad(counter_reg_bit[1]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_1sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_1.extended_lut = "off",
		counter_comb_bita_1.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_1.shared_arith = "off",
		counter_comb_bita_1.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.datad(counter_reg_bit[2]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_2sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_2.extended_lut = "off",
		counter_comb_bita_2.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_2.shared_arith = "off",
		counter_comb_bita_2.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.datad(counter_reg_bit[3]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_3sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_3.extended_lut = "off",
		counter_comb_bita_3.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_3.shared_arith = "off",
		counter_comb_bita_3.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.datad(counter_reg_bit[4]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_4sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_4.extended_lut = "off",
		counter_comb_bita_4.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_4.shared_arith = "off",
		counter_comb_bita_4.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.datad(counter_reg_bit[5]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_5sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_5.extended_lut = "off",
		counter_comb_bita_5.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_5.shared_arith = "off",
		counter_comb_bita_5.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.datad(counter_reg_bit[6]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_6sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_6.extended_lut = "off",
		counter_comb_bita_6.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_6.shared_arith = "off",
		counter_comb_bita_6.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_7cout[0:0]),
	.datad(counter_reg_bit[7]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_7sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_7.extended_lut = "off",
		counter_comb_bita_7.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_7.shared_arith = "off",
		counter_comb_bita_7.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_8
	( 
	.cin(wire_counter_comb_bita_7cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_8cout[0:0]),
	.datad(counter_reg_bit[8]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_8sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_8.extended_lut = "off",
		counter_comb_bita_8.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_8.shared_arith = "off",
		counter_comb_bita_8.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_9
	( 
	.cin(wire_counter_comb_bita_8cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_9cout[0:0]),
	.datad(counter_reg_bit[9]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_9sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_9.extended_lut = "off",
		counter_comb_bita_9.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_9.shared_arith = "off",
		counter_comb_bita_9.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_10
	( 
	.cin(wire_counter_comb_bita_9cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_10cout[0:0]),
	.datad(counter_reg_bit[10]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_10sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_10.extended_lut = "off",
		counter_comb_bita_10.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_10.shared_arith = "off",
		counter_comb_bita_10.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_11
	( 
	.cin(wire_counter_comb_bita_10cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_11cout[0:0]),
	.datad(counter_reg_bit[11]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_11sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_11.extended_lut = "off",
		counter_comb_bita_11.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_11.shared_arith = "off",
		counter_comb_bita_11.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_12
	( 
	.cin(wire_counter_comb_bita_11cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_12cout[0:0]),
	.datad(counter_reg_bit[12]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_12sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_12.extended_lut = "off",
		counter_comb_bita_12.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_12.shared_arith = "off",
		counter_comb_bita_12.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_13
	( 
	.cin(wire_counter_comb_bita_12cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_13cout[0:0]),
	.datad(counter_reg_bit[13]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_13sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_13.extended_lut = "off",
		counter_comb_bita_13.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_13.shared_arith = "off",
		counter_comb_bita_13.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_14
	( 
	.cin(wire_counter_comb_bita_13cout[0:0]),
	.combout(),
	.cout(),
	.datad(counter_reg_bit[14]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_14sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_14.extended_lut = "off",
		counter_comb_bita_14.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_14.shared_arith = "off",
		counter_comb_bita_14.lpm_type = "stratixiv_lcell_comb";
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {15{1'b0}},
		external_cin = 1'b1,
		lsb_cin = 1'b0,
		q = safe_q,
		s_val = {15{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = updown,
		updown_lsb = updown_dir,
		updown_other_bits = ((~ external_cin) | updown_dir);
endmodule //send_buffer_1_sc_fifo_cntr

//synthesis_resources = lut 15 reg 17 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_a_fefifo
	( 
	aclr,
	clock,
	empty,
	full,
	rreq,
	sclr,
	usedw_out,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	output   empty;
	output   full;
	input   rreq;
	input   sclr;
	output   [14:0]  usedw_out;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   rreq;
	tri0   sclr;
	tri0   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	b_full;
	reg	b_non_empty;
	wire  [14:0]   wire_count_usedw_q;
	wire  [14:0]  equal_af1;
	wire  [14:0]  equal_one;
	wire  is_almost_empty0;
	wire  is_almost_empty1;
	wire  is_almost_empty10;
	wire  is_almost_empty11;
	wire  is_almost_empty12;
	wire  is_almost_empty13;
	wire  is_almost_empty14;
	wire  is_almost_empty2;
	wire  is_almost_empty3;
	wire  is_almost_empty4;
	wire  is_almost_empty5;
	wire  is_almost_empty6;
	wire  is_almost_empty7;
	wire  is_almost_empty8;
	wire  is_almost_empty9;
	wire  is_almost_full0;
	wire  is_almost_full1;
	wire  is_almost_full10;
	wire  is_almost_full11;
	wire  is_almost_full12;
	wire  is_almost_full13;
	wire  is_almost_full14;
	wire  is_almost_full2;
	wire  is_almost_full3;
	wire  is_almost_full4;
	wire  is_almost_full5;
	wire  is_almost_full6;
	wire  is_almost_full7;
	wire  is_almost_full8;
	wire  is_almost_full9;
	wire  [14:0]  usedw;
	wire  valid_rreq;
	wire  valid_wreq;

	// synopsys translate_off
	initial
		b_full = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_full <= 1'b0;
		else  b_full <= ((b_full & (b_full ^ (sclr | rreq))) | (((~ b_full) & b_non_empty) & ((~ sclr) & ((is_almost_full14 & wreq) & (~ rreq)))));
	// synopsys translate_off
	initial
		b_non_empty = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_non_empty <= 1'b0;
		else  b_non_empty <= (((b_full & (b_full ^ sclr)) | (((~ b_non_empty) & wreq) & (~ sclr))) | (((~ b_full) & b_non_empty) & (((~ b_full) & b_non_empty) ^ (sclr | ((is_almost_empty14 & rreq) & (~ wreq))))));
	send_buffer_1_sc_fifo_cntr   count_usedw
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en((valid_wreq ^ valid_rreq)),
	.q(wire_count_usedw_q),
	.sclr(sclr),
	.updown(valid_wreq));
	assign
		empty = (~ b_non_empty),
		equal_af1 = {15{1'b0}},
		equal_one = {{14{1'b1}}, 1'b0},
		full = b_full,
		is_almost_empty0 = (usedw[0] ^ equal_one[0]),
		is_almost_empty1 = ((usedw[1] ^ equal_one[1]) & is_almost_empty0),
		is_almost_empty10 = ((usedw[10] ^ equal_one[10]) & is_almost_empty9),
		is_almost_empty11 = ((usedw[11] ^ equal_one[11]) & is_almost_empty10),
		is_almost_empty12 = ((usedw[12] ^ equal_one[12]) & is_almost_empty11),
		is_almost_empty13 = ((usedw[13] ^ equal_one[13]) & is_almost_empty12),
		is_almost_empty14 = ((usedw[14] ^ equal_one[14]) & is_almost_empty13),
		is_almost_empty2 = ((usedw[2] ^ equal_one[2]) & is_almost_empty1),
		is_almost_empty3 = ((usedw[3] ^ equal_one[3]) & is_almost_empty2),
		is_almost_empty4 = ((usedw[4] ^ equal_one[4]) & is_almost_empty3),
		is_almost_empty5 = ((usedw[5] ^ equal_one[5]) & is_almost_empty4),
		is_almost_empty6 = ((usedw[6] ^ equal_one[6]) & is_almost_empty5),
		is_almost_empty7 = ((usedw[7] ^ equal_one[7]) & is_almost_empty6),
		is_almost_empty8 = ((usedw[8] ^ equal_one[8]) & is_almost_empty7),
		is_almost_empty9 = ((usedw[9] ^ equal_one[9]) & is_almost_empty8),
		is_almost_full0 = (usedw[0] ^ equal_af1[0]),
		is_almost_full1 = ((usedw[1] ^ equal_af1[1]) & is_almost_full0),
		is_almost_full10 = ((usedw[10] ^ equal_af1[10]) & is_almost_full9),
		is_almost_full11 = ((usedw[11] ^ equal_af1[11]) & is_almost_full10),
		is_almost_full12 = ((usedw[12] ^ equal_af1[12]) & is_almost_full11),
		is_almost_full13 = ((usedw[13] ^ equal_af1[13]) & is_almost_full12),
		is_almost_full14 = ((usedw[14] ^ equal_af1[14]) & is_almost_full13),
		is_almost_full2 = ((usedw[2] ^ equal_af1[2]) & is_almost_full1),
		is_almost_full3 = ((usedw[3] ^ equal_af1[3]) & is_almost_full2),
		is_almost_full4 = ((usedw[4] ^ equal_af1[4]) & is_almost_full3),
		is_almost_full5 = ((usedw[5] ^ equal_af1[5]) & is_almost_full4),
		is_almost_full6 = ((usedw[6] ^ equal_af1[6]) & is_almost_full5),
		is_almost_full7 = ((usedw[7] ^ equal_af1[7]) & is_almost_full6),
		is_almost_full8 = ((usedw[8] ^ equal_af1[8]) & is_almost_full7),
		is_almost_full9 = ((usedw[9] ^ equal_af1[9]) & is_almost_full8),
		usedw = wire_count_usedw_q,
		usedw_out = usedw,
		valid_rreq = (rreq & b_non_empty),
		valid_wreq = (wreq & (~ b_full));
endmodule //send_buffer_1_sc_fifo_a_fefifo


//altsyncram ADDRESS_ACLR_A="NONE" ADDRESS_ACLR_B="NONE" ADDRESS_REG_B="CLOCK1" DEVICE_FAMILY="Stratix IV" ENABLE_ECC="FALSE" INDATA_ACLR_A="NONE" NUMWORDS_A=32768 NUMWORDS_B=32768 OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="NONE" OUTDATA_REG_B="UNREGISTERED" RAM_BLOCK_TYPE="M144K" RDCONTROL_ACLR_B="NONE" RDCONTROL_REG_B="CLOCK0" READ_DURING_WRITE_MODE_MIXED_PORTS="DONT_CARE" WIDTH_A=8 WIDTH_B=8 WIDTH_ECCSTATUS=2 WIDTHAD_A=15 WIDTHAD_B=15 WRCONTROL_ACLR_A="NONE" address_a address_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 18.1 cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_decode DEVICE_FAMILY="Stratix IV" LPM_DECODES=2 LPM_WIDTH=1 data enable eq
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_decode
	( 
	data,
	enable,
	eq) /* synthesis synthesis_clearbox=1 */;
	input   [0:0]  data;
	input   enable;
	output   [1:0]  eq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [0:0]  data;
	tri1   enable;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]  eq_node;

	assign
		eq = eq_node,
		eq_node = {(data & enable), ((~ data) & enable)};
endmodule //send_buffer_1_sc_fifo_decode


//lpm_mux DEVICE_FAMILY="Stratix IV" LPM_SIZE=2 LPM_WIDTH=8 LPM_WIDTHS=1 data result sel
//VERSION_BEGIN 18.1 cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = lut 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_mux
	( 
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [7:0]  result;
	input   [0:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [15:0]  data;
	tri0   [0:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	wire_l1_w0_n0_mux_dataout;
	wire	wire_l1_w1_n0_mux_dataout;
	wire	wire_l1_w2_n0_mux_dataout;
	wire	wire_l1_w3_n0_mux_dataout;
	wire	wire_l1_w4_n0_mux_dataout;
	wire	wire_l1_w5_n0_mux_dataout;
	wire	wire_l1_w6_n0_mux_dataout;
	wire	wire_l1_w7_n0_mux_dataout;
	wire  [15:0]  data_wire;
	wire  [7:0]  result_wire_ext;
	wire  [0:0]  sel_wire;

	assign		wire_l1_w0_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[8] : data_wire[0];
	assign		wire_l1_w1_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[9] : data_wire[1];
	assign		wire_l1_w2_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[10] : data_wire[2];
	assign		wire_l1_w3_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[11] : data_wire[3];
	assign		wire_l1_w4_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[12] : data_wire[4];
	assign		wire_l1_w5_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[13] : data_wire[5];
	assign		wire_l1_w6_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[14] : data_wire[6];
	assign		wire_l1_w7_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[15] : data_wire[7];
	assign
		data_wire = {data},
		result = result_wire_ext,
		result_wire_ext = {wire_l1_w7_n0_mux_dataout, wire_l1_w6_n0_mux_dataout, wire_l1_w5_n0_mux_dataout, wire_l1_w4_n0_mux_dataout, wire_l1_w3_n0_mux_dataout, wire_l1_w2_n0_mux_dataout, wire_l1_w1_n0_mux_dataout, wire_l1_w0_n0_mux_dataout},
		sel_wire = {sel[0]};
endmodule //send_buffer_1_sc_fifo_mux

//synthesis_resources = lut 5 M144K 2 reg 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  send_buffer_1_sc_fifo_altsyncram
	( 
	address_a,
	address_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   [14:0]  address_a;
	input   [14:0]  address_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [7:0]  data_a;
	output   [7:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   [14:0]  address_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [7:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[0:0]	address_reg_b;
	wire  [1:0]   wire_decode2_eq;
	wire  [1:0]   wire_wren_decode_a_eq;
	wire  [7:0]   wire_mux3_result;
	wire  [0:0]   wire_ram_block1a_0portbdataout;
	wire  [0:0]   wire_ram_block1a_1portbdataout;
	wire  [0:0]   wire_ram_block1a_2portbdataout;
	wire  [0:0]   wire_ram_block1a_3portbdataout;
	wire  [0:0]   wire_ram_block1a_4portbdataout;
	wire  [0:0]   wire_ram_block1a_5portbdataout;
	wire  [0:0]   wire_ram_block1a_6portbdataout;
	wire  [0:0]   wire_ram_block1a_7portbdataout;
	wire  [0:0]   wire_ram_block1a_8portbdataout;
	wire  [0:0]   wire_ram_block1a_9portbdataout;
	wire  [0:0]   wire_ram_block1a_10portbdataout;
	wire  [0:0]   wire_ram_block1a_11portbdataout;
	wire  [0:0]   wire_ram_block1a_12portbdataout;
	wire  [0:0]   wire_ram_block1a_13portbdataout;
	wire  [0:0]   wire_ram_block1a_14portbdataout;
	wire  [0:0]   wire_ram_block1a_15portbdataout;
	wire  [14:0]  address_a_wire;
	wire  [0:0]  address_b_sel;
	wire  [14:0]  address_b_wire;
	wire  [0:0]  w_addr_val_a499w;
	wire  [0:0]  wren_decode_addr_sel_a;

	// synopsys translate_off
	initial
		address_reg_b = 0;
	// synopsys translate_on
	always @ ( posedge clock1)
		if (clocken1 == 1'b1)   address_reg_b <= address_b_sel;
	send_buffer_1_sc_fifo_decode   decode2
	( 
	.data(address_a_wire[14]),
	.enable(wren_a),
	.eq(wire_decode2_eq));
	send_buffer_1_sc_fifo_decode   wren_decode_a
	( 
	.data(w_addr_val_a499w),
	.enable(wren_a),
	.eq(wire_wren_decode_a_eq));
	send_buffer_1_sc_fifo_mux   mux3
	( 
	.data({wire_ram_block1a_15portbdataout[0], wire_ram_block1a_14portbdataout[0], wire_ram_block1a_13portbdataout[0], wire_ram_block1a_12portbdataout[0], wire_ram_block1a_11portbdataout[0], wire_ram_block1a_10portbdataout[0], wire_ram_block1a_9portbdataout[0], wire_ram_block1a_8portbdataout[0], wire_ram_block1a_7portbdataout[0], wire_ram_block1a_6portbdataout[0], wire_ram_block1a_5portbdataout[0], wire_ram_block1a_4portbdataout[0], wire_ram_block1a_3portbdataout[0], wire_ram_block1a_2portbdataout[0], wire_ram_block1a_1portbdataout[0], wire_ram_block1a_0portbdataout[0]}),
	.result(wire_mux3_result),
	.sel(address_reg_b));
	stratixiv_ram_block   ram_block1a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_0portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_0.clk0_core_clock_enable = "ena0",
		ram_block1a_0.clk0_input_clock_enable = "none",
		ram_block1a_0.clk1_core_clock_enable = "ena1",
		ram_block1a_0.clk1_input_clock_enable = "ena1",
		ram_block1a_0.connectivity_checking = "OFF",
		ram_block1a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_0.operation_mode = "dual_port",
		ram_block1a_0.port_a_address_width = 14,
		ram_block1a_0.port_a_data_width = 1,
		ram_block1a_0.port_a_first_address = 0,
		ram_block1a_0.port_a_first_bit_number = 0,
		ram_block1a_0.port_a_last_address = 16383,
		ram_block1a_0.port_a_logical_ram_depth = 32768,
		ram_block1a_0.port_a_logical_ram_width = 8,
		ram_block1a_0.port_b_address_clear = "none",
		ram_block1a_0.port_b_address_clock = "clock1",
		ram_block1a_0.port_b_address_width = 14,
		ram_block1a_0.port_b_data_out_clear = "none",
		ram_block1a_0.port_b_data_width = 1,
		ram_block1a_0.port_b_first_address = 0,
		ram_block1a_0.port_b_first_bit_number = 0,
		ram_block1a_0.port_b_last_address = 16383,
		ram_block1a_0.port_b_logical_ram_depth = 32768,
		ram_block1a_0.port_b_logical_ram_width = 8,
		ram_block1a_0.port_b_read_enable_clock = "clock1",
		ram_block1a_0.ram_block_type = "M144K",
		ram_block1a_0.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_1portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_1.clk0_core_clock_enable = "ena0",
		ram_block1a_1.clk0_input_clock_enable = "none",
		ram_block1a_1.clk1_core_clock_enable = "ena1",
		ram_block1a_1.clk1_input_clock_enable = "ena1",
		ram_block1a_1.connectivity_checking = "OFF",
		ram_block1a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_1.operation_mode = "dual_port",
		ram_block1a_1.port_a_address_width = 14,
		ram_block1a_1.port_a_data_width = 1,
		ram_block1a_1.port_a_first_address = 0,
		ram_block1a_1.port_a_first_bit_number = 1,
		ram_block1a_1.port_a_last_address = 16383,
		ram_block1a_1.port_a_logical_ram_depth = 32768,
		ram_block1a_1.port_a_logical_ram_width = 8,
		ram_block1a_1.port_b_address_clear = "none",
		ram_block1a_1.port_b_address_clock = "clock1",
		ram_block1a_1.port_b_address_width = 14,
		ram_block1a_1.port_b_data_out_clear = "none",
		ram_block1a_1.port_b_data_width = 1,
		ram_block1a_1.port_b_first_address = 0,
		ram_block1a_1.port_b_first_bit_number = 1,
		ram_block1a_1.port_b_last_address = 16383,
		ram_block1a_1.port_b_logical_ram_depth = 32768,
		ram_block1a_1.port_b_logical_ram_width = 8,
		ram_block1a_1.port_b_read_enable_clock = "clock1",
		ram_block1a_1.ram_block_type = "M144K",
		ram_block1a_1.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_2portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_2.clk0_core_clock_enable = "ena0",
		ram_block1a_2.clk0_input_clock_enable = "none",
		ram_block1a_2.clk1_core_clock_enable = "ena1",
		ram_block1a_2.clk1_input_clock_enable = "ena1",
		ram_block1a_2.connectivity_checking = "OFF",
		ram_block1a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_2.operation_mode = "dual_port",
		ram_block1a_2.port_a_address_width = 14,
		ram_block1a_2.port_a_data_width = 1,
		ram_block1a_2.port_a_first_address = 0,
		ram_block1a_2.port_a_first_bit_number = 2,
		ram_block1a_2.port_a_last_address = 16383,
		ram_block1a_2.port_a_logical_ram_depth = 32768,
		ram_block1a_2.port_a_logical_ram_width = 8,
		ram_block1a_2.port_b_address_clear = "none",
		ram_block1a_2.port_b_address_clock = "clock1",
		ram_block1a_2.port_b_address_width = 14,
		ram_block1a_2.port_b_data_out_clear = "none",
		ram_block1a_2.port_b_data_width = 1,
		ram_block1a_2.port_b_first_address = 0,
		ram_block1a_2.port_b_first_bit_number = 2,
		ram_block1a_2.port_b_last_address = 16383,
		ram_block1a_2.port_b_logical_ram_depth = 32768,
		ram_block1a_2.port_b_logical_ram_width = 8,
		ram_block1a_2.port_b_read_enable_clock = "clock1",
		ram_block1a_2.ram_block_type = "M144K",
		ram_block1a_2.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_3portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_3.clk0_core_clock_enable = "ena0",
		ram_block1a_3.clk0_input_clock_enable = "none",
		ram_block1a_3.clk1_core_clock_enable = "ena1",
		ram_block1a_3.clk1_input_clock_enable = "ena1",
		ram_block1a_3.connectivity_checking = "OFF",
		ram_block1a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_3.operation_mode = "dual_port",
		ram_block1a_3.port_a_address_width = 14,
		ram_block1a_3.port_a_data_width = 1,
		ram_block1a_3.port_a_first_address = 0,
		ram_block1a_3.port_a_first_bit_number = 3,
		ram_block1a_3.port_a_last_address = 16383,
		ram_block1a_3.port_a_logical_ram_depth = 32768,
		ram_block1a_3.port_a_logical_ram_width = 8,
		ram_block1a_3.port_b_address_clear = "none",
		ram_block1a_3.port_b_address_clock = "clock1",
		ram_block1a_3.port_b_address_width = 14,
		ram_block1a_3.port_b_data_out_clear = "none",
		ram_block1a_3.port_b_data_width = 1,
		ram_block1a_3.port_b_first_address = 0,
		ram_block1a_3.port_b_first_bit_number = 3,
		ram_block1a_3.port_b_last_address = 16383,
		ram_block1a_3.port_b_logical_ram_depth = 32768,
		ram_block1a_3.port_b_logical_ram_width = 8,
		ram_block1a_3.port_b_read_enable_clock = "clock1",
		ram_block1a_3.ram_block_type = "M144K",
		ram_block1a_3.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_4portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_4.clk0_core_clock_enable = "ena0",
		ram_block1a_4.clk0_input_clock_enable = "none",
		ram_block1a_4.clk1_core_clock_enable = "ena1",
		ram_block1a_4.clk1_input_clock_enable = "ena1",
		ram_block1a_4.connectivity_checking = "OFF",
		ram_block1a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_4.operation_mode = "dual_port",
		ram_block1a_4.port_a_address_width = 14,
		ram_block1a_4.port_a_data_width = 1,
		ram_block1a_4.port_a_first_address = 0,
		ram_block1a_4.port_a_first_bit_number = 4,
		ram_block1a_4.port_a_last_address = 16383,
		ram_block1a_4.port_a_logical_ram_depth = 32768,
		ram_block1a_4.port_a_logical_ram_width = 8,
		ram_block1a_4.port_b_address_clear = "none",
		ram_block1a_4.port_b_address_clock = "clock1",
		ram_block1a_4.port_b_address_width = 14,
		ram_block1a_4.port_b_data_out_clear = "none",
		ram_block1a_4.port_b_data_width = 1,
		ram_block1a_4.port_b_first_address = 0,
		ram_block1a_4.port_b_first_bit_number = 4,
		ram_block1a_4.port_b_last_address = 16383,
		ram_block1a_4.port_b_logical_ram_depth = 32768,
		ram_block1a_4.port_b_logical_ram_width = 8,
		ram_block1a_4.port_b_read_enable_clock = "clock1",
		ram_block1a_4.ram_block_type = "M144K",
		ram_block1a_4.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_5portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_5.clk0_core_clock_enable = "ena0",
		ram_block1a_5.clk0_input_clock_enable = "none",
		ram_block1a_5.clk1_core_clock_enable = "ena1",
		ram_block1a_5.clk1_input_clock_enable = "ena1",
		ram_block1a_5.connectivity_checking = "OFF",
		ram_block1a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_5.operation_mode = "dual_port",
		ram_block1a_5.port_a_address_width = 14,
		ram_block1a_5.port_a_data_width = 1,
		ram_block1a_5.port_a_first_address = 0,
		ram_block1a_5.port_a_first_bit_number = 5,
		ram_block1a_5.port_a_last_address = 16383,
		ram_block1a_5.port_a_logical_ram_depth = 32768,
		ram_block1a_5.port_a_logical_ram_width = 8,
		ram_block1a_5.port_b_address_clear = "none",
		ram_block1a_5.port_b_address_clock = "clock1",
		ram_block1a_5.port_b_address_width = 14,
		ram_block1a_5.port_b_data_out_clear = "none",
		ram_block1a_5.port_b_data_width = 1,
		ram_block1a_5.port_b_first_address = 0,
		ram_block1a_5.port_b_first_bit_number = 5,
		ram_block1a_5.port_b_last_address = 16383,
		ram_block1a_5.port_b_logical_ram_depth = 32768,
		ram_block1a_5.port_b_logical_ram_width = 8,
		ram_block1a_5.port_b_read_enable_clock = "clock1",
		ram_block1a_5.ram_block_type = "M144K",
		ram_block1a_5.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_6portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_6.clk0_core_clock_enable = "ena0",
		ram_block1a_6.clk0_input_clock_enable = "none",
		ram_block1a_6.clk1_core_clock_enable = "ena1",
		ram_block1a_6.clk1_input_clock_enable = "ena1",
		ram_block1a_6.connectivity_checking = "OFF",
		ram_block1a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_6.operation_mode = "dual_port",
		ram_block1a_6.port_a_address_width = 14,
		ram_block1a_6.port_a_data_width = 1,
		ram_block1a_6.port_a_first_address = 0,
		ram_block1a_6.port_a_first_bit_number = 6,
		ram_block1a_6.port_a_last_address = 16383,
		ram_block1a_6.port_a_logical_ram_depth = 32768,
		ram_block1a_6.port_a_logical_ram_width = 8,
		ram_block1a_6.port_b_address_clear = "none",
		ram_block1a_6.port_b_address_clock = "clock1",
		ram_block1a_6.port_b_address_width = 14,
		ram_block1a_6.port_b_data_out_clear = "none",
		ram_block1a_6.port_b_data_width = 1,
		ram_block1a_6.port_b_first_address = 0,
		ram_block1a_6.port_b_first_bit_number = 6,
		ram_block1a_6.port_b_last_address = 16383,
		ram_block1a_6.port_b_logical_ram_depth = 32768,
		ram_block1a_6.port_b_logical_ram_width = 8,
		ram_block1a_6.port_b_read_enable_clock = "clock1",
		ram_block1a_6.ram_block_type = "M144K",
		ram_block1a_6.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[0]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wire_decode2_eq[0]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_7portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_7.clk0_core_clock_enable = "ena0",
		ram_block1a_7.clk0_input_clock_enable = "none",
		ram_block1a_7.clk1_core_clock_enable = "ena1",
		ram_block1a_7.clk1_input_clock_enable = "ena1",
		ram_block1a_7.connectivity_checking = "OFF",
		ram_block1a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_7.operation_mode = "dual_port",
		ram_block1a_7.port_a_address_width = 14,
		ram_block1a_7.port_a_data_width = 1,
		ram_block1a_7.port_a_first_address = 0,
		ram_block1a_7.port_a_first_bit_number = 7,
		ram_block1a_7.port_a_last_address = 16383,
		ram_block1a_7.port_a_logical_ram_depth = 32768,
		ram_block1a_7.port_a_logical_ram_width = 8,
		ram_block1a_7.port_b_address_clear = "none",
		ram_block1a_7.port_b_address_clock = "clock1",
		ram_block1a_7.port_b_address_width = 14,
		ram_block1a_7.port_b_data_out_clear = "none",
		ram_block1a_7.port_b_data_width = 1,
		ram_block1a_7.port_b_first_address = 0,
		ram_block1a_7.port_b_first_bit_number = 7,
		ram_block1a_7.port_b_last_address = 16383,
		ram_block1a_7.port_b_logical_ram_depth = 32768,
		ram_block1a_7.port_b_logical_ram_width = 8,
		ram_block1a_7.port_b_read_enable_clock = "clock1",
		ram_block1a_7.ram_block_type = "M144K",
		ram_block1a_7.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_8
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_8portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_8.clk0_core_clock_enable = "ena0",
		ram_block1a_8.clk0_input_clock_enable = "none",
		ram_block1a_8.clk1_core_clock_enable = "ena1",
		ram_block1a_8.clk1_input_clock_enable = "ena1",
		ram_block1a_8.connectivity_checking = "OFF",
		ram_block1a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_8.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_8.operation_mode = "dual_port",
		ram_block1a_8.port_a_address_width = 14,
		ram_block1a_8.port_a_data_width = 1,
		ram_block1a_8.port_a_first_address = 16384,
		ram_block1a_8.port_a_first_bit_number = 0,
		ram_block1a_8.port_a_last_address = 32767,
		ram_block1a_8.port_a_logical_ram_depth = 32768,
		ram_block1a_8.port_a_logical_ram_width = 8,
		ram_block1a_8.port_b_address_clear = "none",
		ram_block1a_8.port_b_address_clock = "clock1",
		ram_block1a_8.port_b_address_width = 14,
		ram_block1a_8.port_b_data_out_clear = "none",
		ram_block1a_8.port_b_data_width = 1,
		ram_block1a_8.port_b_first_address = 16384,
		ram_block1a_8.port_b_first_bit_number = 0,
		ram_block1a_8.port_b_last_address = 32767,
		ram_block1a_8.port_b_logical_ram_depth = 32768,
		ram_block1a_8.port_b_logical_ram_width = 8,
		ram_block1a_8.port_b_read_enable_clock = "clock1",
		ram_block1a_8.ram_block_type = "M144K",
		ram_block1a_8.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_9
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_9portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_9.clk0_core_clock_enable = "ena0",
		ram_block1a_9.clk0_input_clock_enable = "none",
		ram_block1a_9.clk1_core_clock_enable = "ena1",
		ram_block1a_9.clk1_input_clock_enable = "ena1",
		ram_block1a_9.connectivity_checking = "OFF",
		ram_block1a_9.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_9.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_9.operation_mode = "dual_port",
		ram_block1a_9.port_a_address_width = 14,
		ram_block1a_9.port_a_data_width = 1,
		ram_block1a_9.port_a_first_address = 16384,
		ram_block1a_9.port_a_first_bit_number = 1,
		ram_block1a_9.port_a_last_address = 32767,
		ram_block1a_9.port_a_logical_ram_depth = 32768,
		ram_block1a_9.port_a_logical_ram_width = 8,
		ram_block1a_9.port_b_address_clear = "none",
		ram_block1a_9.port_b_address_clock = "clock1",
		ram_block1a_9.port_b_address_width = 14,
		ram_block1a_9.port_b_data_out_clear = "none",
		ram_block1a_9.port_b_data_width = 1,
		ram_block1a_9.port_b_first_address = 16384,
		ram_block1a_9.port_b_first_bit_number = 1,
		ram_block1a_9.port_b_last_address = 32767,
		ram_block1a_9.port_b_logical_ram_depth = 32768,
		ram_block1a_9.port_b_logical_ram_width = 8,
		ram_block1a_9.port_b_read_enable_clock = "clock1",
		ram_block1a_9.ram_block_type = "M144K",
		ram_block1a_9.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_10
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_10portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_10.clk0_core_clock_enable = "ena0",
		ram_block1a_10.clk0_input_clock_enable = "none",
		ram_block1a_10.clk1_core_clock_enable = "ena1",
		ram_block1a_10.clk1_input_clock_enable = "ena1",
		ram_block1a_10.connectivity_checking = "OFF",
		ram_block1a_10.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_10.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_10.operation_mode = "dual_port",
		ram_block1a_10.port_a_address_width = 14,
		ram_block1a_10.port_a_data_width = 1,
		ram_block1a_10.port_a_first_address = 16384,
		ram_block1a_10.port_a_first_bit_number = 2,
		ram_block1a_10.port_a_last_address = 32767,
		ram_block1a_10.port_a_logical_ram_depth = 32768,
		ram_block1a_10.port_a_logical_ram_width = 8,
		ram_block1a_10.port_b_address_clear = "none",
		ram_block1a_10.port_b_address_clock = "clock1",
		ram_block1a_10.port_b_address_width = 14,
		ram_block1a_10.port_b_data_out_clear = "none",
		ram_block1a_10.port_b_data_width = 1,
		ram_block1a_10.port_b_first_address = 16384,
		ram_block1a_10.port_b_first_bit_number = 2,
		ram_block1a_10.port_b_last_address = 32767,
		ram_block1a_10.port_b_logical_ram_depth = 32768,
		ram_block1a_10.port_b_logical_ram_width = 8,
		ram_block1a_10.port_b_read_enable_clock = "clock1",
		ram_block1a_10.ram_block_type = "M144K",
		ram_block1a_10.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_11
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_11portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_11.clk0_core_clock_enable = "ena0",
		ram_block1a_11.clk0_input_clock_enable = "none",
		ram_block1a_11.clk1_core_clock_enable = "ena1",
		ram_block1a_11.clk1_input_clock_enable = "ena1",
		ram_block1a_11.connectivity_checking = "OFF",
		ram_block1a_11.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_11.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_11.operation_mode = "dual_port",
		ram_block1a_11.port_a_address_width = 14,
		ram_block1a_11.port_a_data_width = 1,
		ram_block1a_11.port_a_first_address = 16384,
		ram_block1a_11.port_a_first_bit_number = 3,
		ram_block1a_11.port_a_last_address = 32767,
		ram_block1a_11.port_a_logical_ram_depth = 32768,
		ram_block1a_11.port_a_logical_ram_width = 8,
		ram_block1a_11.port_b_address_clear = "none",
		ram_block1a_11.port_b_address_clock = "clock1",
		ram_block1a_11.port_b_address_width = 14,
		ram_block1a_11.port_b_data_out_clear = "none",
		ram_block1a_11.port_b_data_width = 1,
		ram_block1a_11.port_b_first_address = 16384,
		ram_block1a_11.port_b_first_bit_number = 3,
		ram_block1a_11.port_b_last_address = 32767,
		ram_block1a_11.port_b_logical_ram_depth = 32768,
		ram_block1a_11.port_b_logical_ram_width = 8,
		ram_block1a_11.port_b_read_enable_clock = "clock1",
		ram_block1a_11.ram_block_type = "M144K",
		ram_block1a_11.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_12
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_12portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_12.clk0_core_clock_enable = "ena0",
		ram_block1a_12.clk0_input_clock_enable = "none",
		ram_block1a_12.clk1_core_clock_enable = "ena1",
		ram_block1a_12.clk1_input_clock_enable = "ena1",
		ram_block1a_12.connectivity_checking = "OFF",
		ram_block1a_12.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_12.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_12.operation_mode = "dual_port",
		ram_block1a_12.port_a_address_width = 14,
		ram_block1a_12.port_a_data_width = 1,
		ram_block1a_12.port_a_first_address = 16384,
		ram_block1a_12.port_a_first_bit_number = 4,
		ram_block1a_12.port_a_last_address = 32767,
		ram_block1a_12.port_a_logical_ram_depth = 32768,
		ram_block1a_12.port_a_logical_ram_width = 8,
		ram_block1a_12.port_b_address_clear = "none",
		ram_block1a_12.port_b_address_clock = "clock1",
		ram_block1a_12.port_b_address_width = 14,
		ram_block1a_12.port_b_data_out_clear = "none",
		ram_block1a_12.port_b_data_width = 1,
		ram_block1a_12.port_b_first_address = 16384,
		ram_block1a_12.port_b_first_bit_number = 4,
		ram_block1a_12.port_b_last_address = 32767,
		ram_block1a_12.port_b_logical_ram_depth = 32768,
		ram_block1a_12.port_b_logical_ram_width = 8,
		ram_block1a_12.port_b_read_enable_clock = "clock1",
		ram_block1a_12.ram_block_type = "M144K",
		ram_block1a_12.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_13
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_13portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_13.clk0_core_clock_enable = "ena0",
		ram_block1a_13.clk0_input_clock_enable = "none",
		ram_block1a_13.clk1_core_clock_enable = "ena1",
		ram_block1a_13.clk1_input_clock_enable = "ena1",
		ram_block1a_13.connectivity_checking = "OFF",
		ram_block1a_13.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_13.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_13.operation_mode = "dual_port",
		ram_block1a_13.port_a_address_width = 14,
		ram_block1a_13.port_a_data_width = 1,
		ram_block1a_13.port_a_first_address = 16384,
		ram_block1a_13.port_a_first_bit_number = 5,
		ram_block1a_13.port_a_last_address = 32767,
		ram_block1a_13.port_a_logical_ram_depth = 32768,
		ram_block1a_13.port_a_logical_ram_width = 8,
		ram_block1a_13.port_b_address_clear = "none",
		ram_block1a_13.port_b_address_clock = "clock1",
		ram_block1a_13.port_b_address_width = 14,
		ram_block1a_13.port_b_data_out_clear = "none",
		ram_block1a_13.port_b_data_width = 1,
		ram_block1a_13.port_b_first_address = 16384,
		ram_block1a_13.port_b_first_bit_number = 5,
		ram_block1a_13.port_b_last_address = 32767,
		ram_block1a_13.port_b_logical_ram_depth = 32768,
		ram_block1a_13.port_b_logical_ram_width = 8,
		ram_block1a_13.port_b_read_enable_clock = "clock1",
		ram_block1a_13.ram_block_type = "M144K",
		ram_block1a_13.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_14
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_14portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_14.clk0_core_clock_enable = "ena0",
		ram_block1a_14.clk0_input_clock_enable = "none",
		ram_block1a_14.clk1_core_clock_enable = "ena1",
		ram_block1a_14.clk1_input_clock_enable = "ena1",
		ram_block1a_14.connectivity_checking = "OFF",
		ram_block1a_14.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_14.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_14.operation_mode = "dual_port",
		ram_block1a_14.port_a_address_width = 14,
		ram_block1a_14.port_a_data_width = 1,
		ram_block1a_14.port_a_first_address = 16384,
		ram_block1a_14.port_a_first_bit_number = 6,
		ram_block1a_14.port_a_last_address = 32767,
		ram_block1a_14.port_a_logical_ram_depth = 32768,
		ram_block1a_14.port_a_logical_ram_width = 8,
		ram_block1a_14.port_b_address_clear = "none",
		ram_block1a_14.port_b_address_clock = "clock1",
		ram_block1a_14.port_b_address_width = 14,
		ram_block1a_14.port_b_data_out_clear = "none",
		ram_block1a_14.port_b_data_width = 1,
		ram_block1a_14.port_b_first_address = 16384,
		ram_block1a_14.port_b_first_bit_number = 6,
		ram_block1a_14.port_b_last_address = 32767,
		ram_block1a_14.port_b_logical_ram_depth = 32768,
		ram_block1a_14.port_b_logical_ram_width = 8,
		ram_block1a_14.port_b_read_enable_clock = "clock1",
		ram_block1a_14.ram_block_type = "M144K",
		ram_block1a_14.lpm_type = "stratixiv_ram_block";
	stratixiv_ram_block   ram_block1a_15
	( 
	.clk0(clock0),
	.clk1(clock1),
	.dftout(),
	.eccstatus(),
	.ena0(wire_wren_decode_a_eq[1]),
	.ena1(clocken1),
	.portaaddr({address_a_wire[13:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wire_decode2_eq[1]),
	.portbaddr({address_b_wire[13:0]}),
	.portbdataout(wire_ram_block1a_15portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block1a_15.clk0_core_clock_enable = "ena0",
		ram_block1a_15.clk0_input_clock_enable = "none",
		ram_block1a_15.clk1_core_clock_enable = "ena1",
		ram_block1a_15.clk1_input_clock_enable = "ena1",
		ram_block1a_15.connectivity_checking = "OFF",
		ram_block1a_15.logical_ram_name = "ALTSYNCRAM",
		ram_block1a_15.mixed_port_feed_through_mode = "dont_care",
		ram_block1a_15.operation_mode = "dual_port",
		ram_block1a_15.port_a_address_width = 14,
		ram_block1a_15.port_a_data_width = 1,
		ram_block1a_15.port_a_first_address = 16384,
		ram_block1a_15.port_a_first_bit_number = 7,
		ram_block1a_15.port_a_last_address = 32767,
		ram_block1a_15.port_a_logical_ram_depth = 32768,
		ram_block1a_15.port_a_logical_ram_width = 8,
		ram_block1a_15.port_b_address_clear = "none",
		ram_block1a_15.port_b_address_clock = "clock1",
		ram_block1a_15.port_b_address_width = 14,
		ram_block1a_15.port_b_data_out_clear = "none",
		ram_block1a_15.port_b_data_width = 1,
		ram_block1a_15.port_b_first_address = 16384,
		ram_block1a_15.port_b_first_bit_number = 7,
		ram_block1a_15.port_b_last_address = 32767,
		ram_block1a_15.port_b_logical_ram_depth = 32768,
		ram_block1a_15.port_b_logical_ram_width = 8,
		ram_block1a_15.port_b_read_enable_clock = "clock1",
		ram_block1a_15.ram_block_type = "M144K",
		ram_block1a_15.lpm_type = "stratixiv_ram_block";
	assign
		address_a_wire = address_a,
		address_b_sel = address_b[14],
		address_b_wire = address_b,
		q_b = wire_mux3_result,
		w_addr_val_a499w = wren_decode_addr_sel_a,
		wren_decode_addr_sel_a = address_a_wire[14];
endmodule //send_buffer_1_sc_fifo_altsyncram


//lpm_counter DEVICE_FAMILY="Stratix IV" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=15 aclr clock cnt_en q sclr
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 15 reg 15 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_cntr1
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [14:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[14:0]	wire_counter_reg_bit_d;
	wire	[14:0]	wire_counter_reg_bit_asdata;
	reg	[14:0]	counter_reg_bit;
	wire	[14:0]	wire_counter_reg_bit_ena;
	wire	[14:0]	wire_counter_reg_bit_sload;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_7cout;
	wire  [0:0]   wire_counter_comb_bita_8cout;
	wire  [0:0]   wire_counter_comb_bita_9cout;
	wire  [0:0]   wire_counter_comb_bita_10cout;
	wire  [0:0]   wire_counter_comb_bita_11cout;
	wire  [0:0]   wire_counter_comb_bita_12cout;
	wire  [0:0]   wire_counter_comb_bita_13cout;
	wire  [0:0]   wire_counter_comb_bita_0sumout;
	wire  [0:0]   wire_counter_comb_bita_1sumout;
	wire  [0:0]   wire_counter_comb_bita_2sumout;
	wire  [0:0]   wire_counter_comb_bita_3sumout;
	wire  [0:0]   wire_counter_comb_bita_4sumout;
	wire  [0:0]   wire_counter_comb_bita_5sumout;
	wire  [0:0]   wire_counter_comb_bita_6sumout;
	wire  [0:0]   wire_counter_comb_bita_7sumout;
	wire  [0:0]   wire_counter_comb_bita_8sumout;
	wire  [0:0]   wire_counter_comb_bita_9sumout;
	wire  [0:0]   wire_counter_comb_bita_10sumout;
	wire  [0:0]   wire_counter_comb_bita_11sumout;
	wire  [0:0]   wire_counter_comb_bita_12sumout;
	wire  [0:0]   wire_counter_comb_bita_13sumout;
	wire  [0:0]   wire_counter_comb_bita_14sumout;
	wire  aclr_actual;
	wire clk_en;
	wire [14:0]  data;
	wire  external_cin;
	wire  lsb_cin;
	wire  [14:0]  s_val;
	wire  [14:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;
	wire  updown_lsb;
	wire  updown_other_bits;

	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[0:0] <= 1'b0;
			else if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[1:1] <= 1'b0;
			else if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[2:2] <= 1'b0;
			else if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[3:3] <= 1'b0;
			else if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[4:4] <= 1'b0;
			else if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[5:5] <= 1'b0;
			else if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[6:6] <= 1'b0;
			else if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[7:7] <= 1'b0;
			else if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	// synopsys translate_off
	initial
		counter_reg_bit[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[8:8] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[8:8] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[8:8] <= 1'b0;
			else if (wire_counter_reg_bit_sload[8:8] == 1'b1) counter_reg_bit[8:8] <= wire_counter_reg_bit_asdata[8:8];
			else  counter_reg_bit[8:8] <= wire_counter_reg_bit_d[8:8];
	// synopsys translate_off
	initial
		counter_reg_bit[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[9:9] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[9:9] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[9:9] <= 1'b0;
			else if (wire_counter_reg_bit_sload[9:9] == 1'b1) counter_reg_bit[9:9] <= wire_counter_reg_bit_asdata[9:9];
			else  counter_reg_bit[9:9] <= wire_counter_reg_bit_d[9:9];
	// synopsys translate_off
	initial
		counter_reg_bit[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[10:10] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[10:10] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[10:10] <= 1'b0;
			else if (wire_counter_reg_bit_sload[10:10] == 1'b1) counter_reg_bit[10:10] <= wire_counter_reg_bit_asdata[10:10];
			else  counter_reg_bit[10:10] <= wire_counter_reg_bit_d[10:10];
	// synopsys translate_off
	initial
		counter_reg_bit[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[11:11] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[11:11] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[11:11] <= 1'b0;
			else if (wire_counter_reg_bit_sload[11:11] == 1'b1) counter_reg_bit[11:11] <= wire_counter_reg_bit_asdata[11:11];
			else  counter_reg_bit[11:11] <= wire_counter_reg_bit_d[11:11];
	// synopsys translate_off
	initial
		counter_reg_bit[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[12:12] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[12:12] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[12:12] <= 1'b0;
			else if (wire_counter_reg_bit_sload[12:12] == 1'b1) counter_reg_bit[12:12] <= wire_counter_reg_bit_asdata[12:12];
			else  counter_reg_bit[12:12] <= wire_counter_reg_bit_d[12:12];
	// synopsys translate_off
	initial
		counter_reg_bit[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[13:13] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[13:13] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[13:13] <= 1'b0;
			else if (wire_counter_reg_bit_sload[13:13] == 1'b1) counter_reg_bit[13:13] <= wire_counter_reg_bit_asdata[13:13];
			else  counter_reg_bit[13:13] <= wire_counter_reg_bit_d[13:13];
	// synopsys translate_off
	initial
		counter_reg_bit[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[14:14] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[14:14] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[14:14] <= 1'b0;
			else if (wire_counter_reg_bit_sload[14:14] == 1'b1) counter_reg_bit[14:14] <= wire_counter_reg_bit_asdata[14:14];
			else  counter_reg_bit[14:14] <= wire_counter_reg_bit_d[14:14];
	assign
		wire_counter_reg_bit_asdata = (({15{sset}} & s_val) | ({15{(~ sset)}} & data)),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_14sumout[0:0], wire_counter_comb_bita_13sumout[0:0], wire_counter_comb_bita_12sumout[0:0], wire_counter_comb_bita_11sumout[0:0], wire_counter_comb_bita_10sumout[0:0], wire_counter_comb_bita_9sumout[0:0], wire_counter_comb_bita_8sumout[0:0], wire_counter_comb_bita_7sumout[0:0], wire_counter_comb_bita_6sumout[0:0], wire_counter_comb_bita_5sumout[0:0], wire_counter_comb_bita_4sumout[0:0], wire_counter_comb_bita_3sumout[0:0], wire_counter_comb_bita_2sumout[0:0], wire_counter_comb_bita_1sumout[0:0], wire_counter_comb_bita_0sumout[0:0]};
	assign
		wire_counter_reg_bit_ena = {15{(clk_en & (((cnt_en | sclr) | sset) | sload))}},
		wire_counter_reg_bit_sload = {15{(sset | sload)}};
	stratixiv_lcell_comb   counter_comb_bita_0
	( 
	.cin(lsb_cin),
	.combout(),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.datad(counter_reg_bit[0]),
	.dataf(updown_lsb),
	.shareout(),
	.sumout(wire_counter_comb_bita_0sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_0.extended_lut = "off",
		counter_comb_bita_0.lut_mask = 64'h000000000000FF00,
		counter_comb_bita_0.shared_arith = "off",
		counter_comb_bita_0.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.datad(counter_reg_bit[1]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_1sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_1.extended_lut = "off",
		counter_comb_bita_1.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_1.shared_arith = "off",
		counter_comb_bita_1.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.datad(counter_reg_bit[2]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_2sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_2.extended_lut = "off",
		counter_comb_bita_2.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_2.shared_arith = "off",
		counter_comb_bita_2.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.datad(counter_reg_bit[3]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_3sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_3.extended_lut = "off",
		counter_comb_bita_3.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_3.shared_arith = "off",
		counter_comb_bita_3.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.datad(counter_reg_bit[4]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_4sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_4.extended_lut = "off",
		counter_comb_bita_4.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_4.shared_arith = "off",
		counter_comb_bita_4.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.datad(counter_reg_bit[5]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_5sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_5.extended_lut = "off",
		counter_comb_bita_5.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_5.shared_arith = "off",
		counter_comb_bita_5.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.datad(counter_reg_bit[6]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_6sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_6.extended_lut = "off",
		counter_comb_bita_6.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_6.shared_arith = "off",
		counter_comb_bita_6.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_7cout[0:0]),
	.datad(counter_reg_bit[7]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_7sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_7.extended_lut = "off",
		counter_comb_bita_7.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_7.shared_arith = "off",
		counter_comb_bita_7.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_8
	( 
	.cin(wire_counter_comb_bita_7cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_8cout[0:0]),
	.datad(counter_reg_bit[8]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_8sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_8.extended_lut = "off",
		counter_comb_bita_8.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_8.shared_arith = "off",
		counter_comb_bita_8.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_9
	( 
	.cin(wire_counter_comb_bita_8cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_9cout[0:0]),
	.datad(counter_reg_bit[9]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_9sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_9.extended_lut = "off",
		counter_comb_bita_9.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_9.shared_arith = "off",
		counter_comb_bita_9.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_10
	( 
	.cin(wire_counter_comb_bita_9cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_10cout[0:0]),
	.datad(counter_reg_bit[10]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_10sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_10.extended_lut = "off",
		counter_comb_bita_10.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_10.shared_arith = "off",
		counter_comb_bita_10.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_11
	( 
	.cin(wire_counter_comb_bita_10cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_11cout[0:0]),
	.datad(counter_reg_bit[11]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_11sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_11.extended_lut = "off",
		counter_comb_bita_11.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_11.shared_arith = "off",
		counter_comb_bita_11.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_12
	( 
	.cin(wire_counter_comb_bita_11cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_12cout[0:0]),
	.datad(counter_reg_bit[12]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_12sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_12.extended_lut = "off",
		counter_comb_bita_12.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_12.shared_arith = "off",
		counter_comb_bita_12.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_13
	( 
	.cin(wire_counter_comb_bita_12cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_13cout[0:0]),
	.datad(counter_reg_bit[13]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_13sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_13.extended_lut = "off",
		counter_comb_bita_13.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_13.shared_arith = "off",
		counter_comb_bita_13.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_14
	( 
	.cin(wire_counter_comb_bita_13cout[0:0]),
	.combout(),
	.cout(),
	.datad(counter_reg_bit[14]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_14sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_14.extended_lut = "off",
		counter_comb_bita_14.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_14.shared_arith = "off",
		counter_comb_bita_14.lpm_type = "stratixiv_lcell_comb";
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {15{1'b0}},
		external_cin = 1'b1,
		lsb_cin = 1'b0,
		q = safe_q,
		s_val = {15{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = 1'b1,
		updown_lsb = updown_dir,
		updown_other_bits = ((~ external_cin) | updown_dir);
endmodule //send_buffer_1_sc_fifo_cntr1

//synthesis_resources = lut 50 M144K 2 reg 48 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_a_dpfifo
	( 
	aclr,
	clock,
	data,
	empty,
	full,
	q,
	rreq,
	sclr,
	usedw,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rreq;
	input   sclr;
	output   [14:0]  usedw;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_fifo_state_empty;
	wire  wire_fifo_state_full;
	wire  [14:0]   wire_fifo_state_usedw_out;
	wire  [7:0]   wire_FIFOram_q_b;
	wire  [14:0]   wire_rd_ptr_count_q;
	wire  [14:0]   wire_wr_ptr_q;
	wire  [14:0]  rd_ptr;
	wire  valid_rreq;
	wire  valid_wreq;

	send_buffer_1_sc_fifo_a_fefifo   fifo_state
	( 
	.aclr(aclr),
	.clock(clock),
	.empty(wire_fifo_state_empty),
	.full(wire_fifo_state_full),
	.rreq(rreq),
	.sclr(sclr),
	.usedw_out(wire_fifo_state_usedw_out),
	.wreq(wreq));
	send_buffer_1_sc_fifo_altsyncram   FIFOram
	( 
	.address_a(wire_wr_ptr_q),
	.address_b(({15{(~ sclr)}} & rd_ptr)),
	.clock0(clock),
	.clock1(clock),
	.clocken1((valid_rreq | sclr)),
	.data_a(data),
	.q_b(wire_FIFOram_q_b),
	.wren_a(valid_wreq));
	send_buffer_1_sc_fifo_cntr1   rd_ptr_count
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_rreq),
	.q(wire_rd_ptr_count_q),
	.sclr(sclr));
	send_buffer_1_sc_fifo_cntr1   wr_ptr
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_wreq),
	.q(wire_wr_ptr_q),
	.sclr(sclr));
	assign
		empty = wire_fifo_state_empty,
		full = wire_fifo_state_full,
		q = wire_FIFOram_q_b,
		rd_ptr = wire_rd_ptr_count_q,
		usedw = wire_fifo_state_usedw_out,
		valid_rreq = (rreq & (~ wire_fifo_state_empty)),
		valid_wreq = (wreq & (~ wire_fifo_state_full));
endmodule //send_buffer_1_sc_fifo_a_dpfifo

//synthesis_resources = lut 50 M144K 2 reg 50 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  send_buffer_1_sc_fifo_scfifo
	( 
	aclr,
	almost_empty,
	almost_full,
	clock,
	data,
	empty,
	full,
	q,
	rdreq,
	sclr,
	usedw,
	wrreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	output   almost_empty;
	output   almost_full;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rdreq;
	input   sclr;
	output   [14:0]  usedw;
	input   wrreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_dpfifo_empty;
	wire  wire_dpfifo_full;
	wire  [7:0]   wire_dpfifo_q;
	wire  [14:0]   wire_dpfifo_usedw;
	reg	dffe_af;
	reg	dffe_nae;
	wire  comparison_ae0;
	wire  comparison_ae1;
	wire  comparison_ae10;
	wire  comparison_ae11;
	wire  comparison_ae12;
	wire  comparison_ae13;
	wire  comparison_ae14;
	wire  comparison_ae2;
	wire  comparison_ae3;
	wire  comparison_ae4;
	wire  comparison_ae5;
	wire  comparison_ae6;
	wire  comparison_ae7;
	wire  comparison_ae8;
	wire  comparison_ae9;
	wire  comparison_af0;
	wire  comparison_af1;
	wire  comparison_af10;
	wire  comparison_af11;
	wire  comparison_af12;
	wire  comparison_af13;
	wire  comparison_af14;
	wire  comparison_af2;
	wire  comparison_af3;
	wire  comparison_af4;
	wire  comparison_af5;
	wire  comparison_af6;
	wire  comparison_af7;
	wire  comparison_af8;
	wire  comparison_af9;
	wire  comparison_pre_ae0;
	wire  comparison_pre_ae1;
	wire  comparison_pre_ae10;
	wire  comparison_pre_ae11;
	wire  comparison_pre_ae12;
	wire  comparison_pre_ae13;
	wire  comparison_pre_ae14;
	wire  comparison_pre_ae2;
	wire  comparison_pre_ae3;
	wire  comparison_pre_ae4;
	wire  comparison_pre_ae5;
	wire  comparison_pre_ae6;
	wire  comparison_pre_ae7;
	wire  comparison_pre_ae8;
	wire  comparison_pre_ae9;
	wire  comparison_pre_af0;
	wire  comparison_pre_af1;
	wire  comparison_pre_af10;
	wire  comparison_pre_af11;
	wire  comparison_pre_af12;
	wire  comparison_pre_af13;
	wire  comparison_pre_af14;
	wire  comparison_pre_af2;
	wire  comparison_pre_af3;
	wire  comparison_pre_af4;
	wire  comparison_pre_af5;
	wire  comparison_pre_af6;
	wire  comparison_pre_af7;
	wire  comparison_pre_af8;
	wire  comparison_pre_af9;
	wire  [14:0]  wire_ae;
	wire  [14:0]  wire_af;
	wire  [14:0]  wire_pre_ae;
	wire  [14:0]  wire_pre_af;

	send_buffer_1_sc_fifo_a_dpfifo   dpfifo
	( 
	.aclr(aclr),
	.clock(clock),
	.data(data),
	.empty(wire_dpfifo_empty),
	.full(wire_dpfifo_full),
	.q(wire_dpfifo_q),
	.rreq(rdreq),
	.sclr(sclr),
	.usedw(wire_dpfifo_usedw),
	.wreq(wrreq));
	// synopsys translate_off
	initial
		dffe_af = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe_af <= 1'b0;
		else  dffe_af <= ((dffe_af & (dffe_af ^ (sclr | ((comparison_af14 & (~ wrreq)) & rdreq)))) | ((~ dffe_af) & ((((~ sclr) & comparison_pre_af14) & wrreq) & (~ rdreq))));
	// synopsys translate_off
	initial
		dffe_nae = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe_nae <= 1'b0;
		else  dffe_nae <= ((dffe_nae & (dffe_nae ^ (sclr | ((comparison_ae14 & (~ wrreq)) & rdreq)))) | ((~ dffe_nae) & ((((~ sclr) & comparison_pre_ae14) & wrreq) & (~ rdreq))));
	assign
		almost_empty = (~ dffe_nae),
		almost_full = dffe_af,
		comparison_ae0 = (wire_dpfifo_usedw[0] ^ wire_ae[0]),
		comparison_ae1 = ((wire_dpfifo_usedw[1] ^ wire_ae[1]) & comparison_ae0),
		comparison_ae10 = ((wire_dpfifo_usedw[10] ^ wire_ae[10]) & comparison_ae9),
		comparison_ae11 = ((wire_dpfifo_usedw[11] ^ wire_ae[11]) & comparison_ae10),
		comparison_ae12 = ((wire_dpfifo_usedw[12] ^ wire_ae[12]) & comparison_ae11),
		comparison_ae13 = ((wire_dpfifo_usedw[13] ^ wire_ae[13]) & comparison_ae12),
		comparison_ae14 = ((wire_dpfifo_usedw[14] ^ wire_ae[14]) & comparison_ae13),
		comparison_ae2 = ((wire_dpfifo_usedw[2] ^ wire_ae[2]) & comparison_ae1),
		comparison_ae3 = ((wire_dpfifo_usedw[3] ^ wire_ae[3]) & comparison_ae2),
		comparison_ae4 = ((wire_dpfifo_usedw[4] ^ wire_ae[4]) & comparison_ae3),
		comparison_ae5 = ((wire_dpfifo_usedw[5] ^ wire_ae[5]) & comparison_ae4),
		comparison_ae6 = ((wire_dpfifo_usedw[6] ^ wire_ae[6]) & comparison_ae5),
		comparison_ae7 = ((wire_dpfifo_usedw[7] ^ wire_ae[7]) & comparison_ae6),
		comparison_ae8 = ((wire_dpfifo_usedw[8] ^ wire_ae[8]) & comparison_ae7),
		comparison_ae9 = ((wire_dpfifo_usedw[9] ^ wire_ae[9]) & comparison_ae8),
		comparison_af0 = (wire_dpfifo_usedw[0] ^ wire_af[0]),
		comparison_af1 = ((wire_dpfifo_usedw[1] ^ wire_af[1]) & comparison_af0),
		comparison_af10 = ((wire_dpfifo_usedw[10] ^ wire_af[10]) & comparison_af9),
		comparison_af11 = ((wire_dpfifo_usedw[11] ^ wire_af[11]) & comparison_af10),
		comparison_af12 = ((wire_dpfifo_usedw[12] ^ wire_af[12]) & comparison_af11),
		comparison_af13 = ((wire_dpfifo_usedw[13] ^ wire_af[13]) & comparison_af12),
		comparison_af14 = ((wire_dpfifo_usedw[14] ^ wire_af[14]) & comparison_af13),
		comparison_af2 = ((wire_dpfifo_usedw[2] ^ wire_af[2]) & comparison_af1),
		comparison_af3 = ((wire_dpfifo_usedw[3] ^ wire_af[3]) & comparison_af2),
		comparison_af4 = ((wire_dpfifo_usedw[4] ^ wire_af[4]) & comparison_af3),
		comparison_af5 = ((wire_dpfifo_usedw[5] ^ wire_af[5]) & comparison_af4),
		comparison_af6 = ((wire_dpfifo_usedw[6] ^ wire_af[6]) & comparison_af5),
		comparison_af7 = ((wire_dpfifo_usedw[7] ^ wire_af[7]) & comparison_af6),
		comparison_af8 = ((wire_dpfifo_usedw[8] ^ wire_af[8]) & comparison_af7),
		comparison_af9 = ((wire_dpfifo_usedw[9] ^ wire_af[9]) & comparison_af8),
		comparison_pre_ae0 = (wire_dpfifo_usedw[0] ^ wire_pre_ae[0]),
		comparison_pre_ae1 = ((wire_dpfifo_usedw[1] ^ wire_pre_ae[1]) & comparison_pre_ae0),
		comparison_pre_ae10 = ((wire_dpfifo_usedw[10] ^ wire_pre_ae[10]) & comparison_pre_ae9),
		comparison_pre_ae11 = ((wire_dpfifo_usedw[11] ^ wire_pre_ae[11]) & comparison_pre_ae10),
		comparison_pre_ae12 = ((wire_dpfifo_usedw[12] ^ wire_pre_ae[12]) & comparison_pre_ae11),
		comparison_pre_ae13 = ((wire_dpfifo_usedw[13] ^ wire_pre_ae[13]) & comparison_pre_ae12),
		comparison_pre_ae14 = ((wire_dpfifo_usedw[14] ^ wire_pre_ae[14]) & comparison_pre_ae13),
		comparison_pre_ae2 = ((wire_dpfifo_usedw[2] ^ wire_pre_ae[2]) & comparison_pre_ae1),
		comparison_pre_ae3 = ((wire_dpfifo_usedw[3] ^ wire_pre_ae[3]) & comparison_pre_ae2),
		comparison_pre_ae4 = ((wire_dpfifo_usedw[4] ^ wire_pre_ae[4]) & comparison_pre_ae3),
		comparison_pre_ae5 = ((wire_dpfifo_usedw[5] ^ wire_pre_ae[5]) & comparison_pre_ae4),
		comparison_pre_ae6 = ((wire_dpfifo_usedw[6] ^ wire_pre_ae[6]) & comparison_pre_ae5),
		comparison_pre_ae7 = ((wire_dpfifo_usedw[7] ^ wire_pre_ae[7]) & comparison_pre_ae6),
		comparison_pre_ae8 = ((wire_dpfifo_usedw[8] ^ wire_pre_ae[8]) & comparison_pre_ae7),
		comparison_pre_ae9 = ((wire_dpfifo_usedw[9] ^ wire_pre_ae[9]) & comparison_pre_ae8),
		comparison_pre_af0 = (wire_dpfifo_usedw[0] ^ wire_pre_af[0]),
		comparison_pre_af1 = ((wire_dpfifo_usedw[1] ^ wire_pre_af[1]) & comparison_pre_af0),
		comparison_pre_af10 = ((wire_dpfifo_usedw[10] ^ wire_pre_af[10]) & comparison_pre_af9),
		comparison_pre_af11 = ((wire_dpfifo_usedw[11] ^ wire_pre_af[11]) & comparison_pre_af10),
		comparison_pre_af12 = ((wire_dpfifo_usedw[12] ^ wire_pre_af[12]) & comparison_pre_af11),
		comparison_pre_af13 = ((wire_dpfifo_usedw[13] ^ wire_pre_af[13]) & comparison_pre_af12),
		comparison_pre_af14 = ((wire_dpfifo_usedw[14] ^ wire_pre_af[14]) & comparison_pre_af13),
		comparison_pre_af2 = ((wire_dpfifo_usedw[2] ^ wire_pre_af[2]) & comparison_pre_af1),
		comparison_pre_af3 = ((wire_dpfifo_usedw[3] ^ wire_pre_af[3]) & comparison_pre_af2),
		comparison_pre_af4 = ((wire_dpfifo_usedw[4] ^ wire_pre_af[4]) & comparison_pre_af3),
		comparison_pre_af5 = ((wire_dpfifo_usedw[5] ^ wire_pre_af[5]) & comparison_pre_af4),
		comparison_pre_af6 = ((wire_dpfifo_usedw[6] ^ wire_pre_af[6]) & comparison_pre_af5),
		comparison_pre_af7 = ((wire_dpfifo_usedw[7] ^ wire_pre_af[7]) & comparison_pre_af6),
		comparison_pre_af8 = ((wire_dpfifo_usedw[8] ^ wire_pre_af[8]) & comparison_pre_af7),
		comparison_pre_af9 = ((wire_dpfifo_usedw[9] ^ wire_pre_af[9]) & comparison_pre_af8),
		empty = wire_dpfifo_empty,
		full = wire_dpfifo_full,
		q = wire_dpfifo_q,
		usedw = wire_dpfifo_usedw,
		wire_ae = {{13{1'b1}}, 1'b0, 1'b1},
		wire_af = {{14{1'b0}}, 1'b1},
		wire_pre_ae = {{14{1'b1}}, 1'b0},
		wire_pre_af = {{13{1'b0}}, 1'b1, 1'b0};
endmodule //send_buffer_1_sc_fifo_scfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module send_buffer_1_sc_fifo (
	aclr,
	clock,
	data,
	rdreq,
	sclr,
	wrreq,
	almost_empty,
	almost_full,
	empty,
	full,
	q,
	usedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clock;
	input	[7:0]  data;
	input	  rdreq;
	input	  sclr;
	input	  wrreq;
	output	  almost_empty;
	output	  almost_full;
	output	  empty;
	output	  full;
	output	[7:0]  q;
	output	[14:0]  usedw;

	wire  sub_wire0;
	wire  sub_wire1;
	wire  sub_wire2;
	wire  sub_wire3;
	wire [7:0] sub_wire4;
	wire [14:0] sub_wire5;
	wire  almost_empty = sub_wire0;
	wire  almost_full = sub_wire1;
	wire  empty = sub_wire2;
	wire  full = sub_wire3;
	wire [7:0] q = sub_wire4[7:0];
	wire [14:0] usedw = sub_wire5[14:0];

	send_buffer_1_sc_fifo_scfifo	send_buffer_1_sc_fifo_scfifo_component (
				.aclr (aclr),
				.clock (clock),
				.data (data),
				.rdreq (rdreq),
				.sclr (sclr),
				.wrreq (wrreq),
				.almost_empty (sub_wire0),
				.almost_full (sub_wire1),
				.empty (sub_wire2),
				.full (sub_wire3),
				.q (sub_wire4),
				.usedw (sub_wire5));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "1"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "2"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "1"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "32766"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "1"
// Retrieval info: PRIVATE: Clock NUMERIC "0"
// Retrieval info: PRIVATE: Depth NUMERIC "32768"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "3"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "8"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "8"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "1"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADD_RAM_OUTPUT_REGISTER STRING "OFF"
// Retrieval info: CONSTANT: ALMOST_EMPTY_VALUE NUMERIC "2"
// Retrieval info: CONSTANT: ALMOST_FULL_VALUE NUMERIC "32766"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=M144K"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "32768"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "scfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "15"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: almost_empty 0 0 0 0 OUTPUT NODEFVAL "almost_empty"
// Retrieval info: USED_PORT: almost_full 0 0 0 0 OUTPUT NODEFVAL "almost_full"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: data 0 0 8 0 INPUT NODEFVAL "data[7..0]"
// Retrieval info: USED_PORT: empty 0 0 0 0 OUTPUT NODEFVAL "empty"
// Retrieval info: USED_PORT: full 0 0 0 0 OUTPUT NODEFVAL "full"
// Retrieval info: USED_PORT: q 0 0 8 0 OUTPUT NODEFVAL "q[7..0]"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: sclr 0 0 0 0 INPUT NODEFVAL "sclr"
// Retrieval info: USED_PORT: usedw 0 0 15 0 OUTPUT NODEFVAL "usedw[14..0]"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 8 0 data 0 0 8 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @sclr 0 0 0 0 sclr 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: almost_empty 0 0 0 0 @almost_empty 0 0 0 0
// Retrieval info: CONNECT: almost_full 0 0 0 0 @almost_full 0 0 0 0
// Retrieval info: CONNECT: empty 0 0 0 0 @empty 0 0 0 0
// Retrieval info: CONNECT: full 0 0 0 0 @full 0 0 0 0
// Retrieval info: CONNECT: q 0 0 8 0 @q 0 0 8 0
// Retrieval info: CONNECT: usedw 0 0 15 0 @usedw 0 0 15 0
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL send_buffer_1_sc_fifo_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
