// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: dcfifo 

// ============================================================
// File Name: spwc_data_dc_fifo.v
// Megafunction Name(s):
// 			dcfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Standard Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//dcfifo_mixed_widths DEVICE_FAMILY="Stratix IV" LPM_NUMWORDS=16 LPM_SHOWAHEAD="ON" LPM_WIDTH=9 LPM_WIDTH_R=9 LPM_WIDTHU=4 LPM_WIDTHU_R=4 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="MLAB" RDSYNC_DELAYPIPE=4 READ_ACLR_SYNCH="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="ON" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdreq rdusedw wrclk wrfull wrreq wrusedw INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=MLAB" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_a_graycounter 2018:09:12:13:04:24:SJ cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_gray_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_dcfifo 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_gray2bin device_family="Stratix IV" WIDTH=5 bin gray
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  spwc_data_dc_fifo_a_gray2bin
	( 
	bin,
	gray) /* synthesis synthesis_clearbox=1 */;
	output   [4:0]  bin;
	input   [4:0]  gray;

	wire  xor0;
	wire  xor1;
	wire  xor2;
	wire  xor3;

	assign
		bin = {gray[4], xor3, xor2, xor1, xor0},
		xor0 = (gray[0] ^ xor1),
		xor1 = (gray[1] ^ xor2),
		xor2 = (gray[2] ^ xor3),
		xor3 = (gray[4] ^ gray[3]);
endmodule //spwc_data_dc_fifo_a_gray2bin


//a_graycounter DEVICE_FAMILY="Stratix IV" PVALUE=1 WIDTH=5 aclr clock cnt_en q
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_a_graycounter 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to counter5a[0]} POWER_UP_LEVEL=HIGH"} *)
module  spwc_data_dc_fifo_a_graycounter
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	counter5a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity6;
	wire  [4:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter5a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) counter5a[0:0] <= 1'b0;
			else  counter5a[0:0] <= ((cnt_en & (counter5a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter5a[0:0]));
	// synopsys translate_off
	initial
		counter5a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[1:1] <= 1'b0;
			else  counter5a[1:1] <= (counter5a[1:1] ^ (counter5a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter5a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[2:2] <= 1'b0;
			else  counter5a[2:2] <= (counter5a[2:2] ^ (counter5a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter5a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[3:3] <= 1'b0;
			else  counter5a[3:3] <= (counter5a[3:3] ^ (counter5a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter5a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[4:4] <= 1'b0;
			else  counter5a[4:4] <= (counter5a[4:4] ^ cntr_cout[3]);
	// synopsys translate_off
	initial
		parity6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity6 <= 1'b0;
		else
			if (sclr == 1'b1) parity6 <= 1'b0;
			else  parity6 <= ((cnt_en & ((((counter5a[0] ^ counter5a[1]) ^ counter5a[2]) ^ counter5a[3]) ^ counter5a[4])) | ((~ cnt_en) & parity6));
	assign
		cntr_cout = {1'b0, (cntr_cout[2] & (~ counter5a[2:2])), (cntr_cout[1] & (~ counter5a[1:1])), (cntr_cout[0] & (~ counter5a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity6 ^ updown) & cnt_en),
		q = counter5a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //spwc_data_dc_fifo_a_graycounter


//a_graycounter DEVICE_FAMILY="Stratix IV" PVALUE=1 WIDTH=5 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=S102
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_a_graycounter 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=S102;{-to counter7a[0]} POWER_UP_LEVEL=HIGH"} *)
module  spwc_data_dc_fifo_a_graycounter1
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	counter7a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity8;
	wire  [4:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter7a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) counter7a[0:0] <= 1'b0;
			else  counter7a[0:0] <= ((cnt_en & (counter7a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter7a[0:0]));
	// synopsys translate_off
	initial
		counter7a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[1:1] <= 1'b0;
			else  counter7a[1:1] <= (counter7a[1:1] ^ (counter7a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter7a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[2:2] <= 1'b0;
			else  counter7a[2:2] <= (counter7a[2:2] ^ (counter7a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter7a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[3:3] <= 1'b0;
			else  counter7a[3:3] <= (counter7a[3:3] ^ (counter7a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter7a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[4:4] <= 1'b0;
			else  counter7a[4:4] <= (counter7a[4:4] ^ cntr_cout[3]);
	// synopsys translate_off
	initial
		parity8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity8 <= 1'b0;
		else
			if (sclr == 1'b1) parity8 <= 1'b0;
			else  parity8 <= ((cnt_en & ((((counter7a[0] ^ counter7a[1]) ^ counter7a[2]) ^ counter7a[3]) ^ counter7a[4])) | ((~ cnt_en) & parity8));
	assign
		cntr_cout = {1'b0, (cntr_cout[2] & (~ counter7a[2:2])), (cntr_cout[1] & (~ counter7a[1:1])), (cntr_cout[0] & (~ counter7a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity8 ^ updown) & cnt_en),
		q = counter7a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //spwc_data_dc_fifo_a_graycounter1


//altdpram DEVICE_FAMILY="Stratix IV" INDATA_ACLR="OFF" INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=MLAB" OUTDATA_REG="UNREGISTERED" RAM_BLOCK_TYPE="MLAB" RDADDRESS_REG="UNREGISTERED" USE_EAB="ON" WIDTH=9 WIDTHAD=4 WRADDRESS_REG="INCLOCK" data inclock outclock q rdaddress wraddress wren
//VERSION_BEGIN 18.1 cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = MLAB 1 reg 13 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"ADV_NETLIST_OPT_ALLOWED=\"NEVER_ALLOW\""} *)
module  spwc_data_dc_fifo_dpram
	( 
	data,
	inclock,
	outclock,
	q,
	rdaddress,
	wraddress,
	wren) /* synthesis synthesis_clearbox=1 */;
	input   [8:0]  data;
	input   inclock;
	input   outclock;
	output   [8:0]  q;
	input   [3:0]  rdaddress;
	input   [3:0]  wraddress;
	input   wren;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   inclock;
	tri1   outclock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;ALLOW_SYNCH_CTRL_USAGE=OFF;DONT_MERGE_REGISTER=ON"} *)
	reg	[8:0]	datain_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON"} *)
	reg	[3:0]	wraddr_reg;
	wire  [8:0]   wire_lutrama_portbdataout;
	wire  [8:0]  datain_wire;
	wire  [8:0]  dataout_wire;
	wire  [3:0]  rdaddr_wire;
	wire  wr_en;
	wire  [3:0]  wraddr_wire;

	// synopsys translate_off
	initial
		datain_reg = 0;
	// synopsys translate_on
	always @ ( posedge inclock)
		  datain_reg <= data;
	// synopsys translate_off
	initial
		wraddr_reg = 0;
	// synopsys translate_on
	always @ ( posedge inclock)
		  wraddr_reg <= wraddress;
	stratixiv_mlab_cell   lutrama_0
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[0]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_0.address_width = 4,
		lutrama_0.data_width = 1,
		lutrama_0.first_address = 0,
		lutrama_0.first_bit_number = 0,
		lutrama_0.last_address = 15,
		lutrama_0.logical_ram_depth = 16,
		lutrama_0.logical_ram_name = "altdpram_instance",
		lutrama_0.logical_ram_width = 9,
		lutrama_0.mixed_port_feed_through_mode = "dont_care",
		lutrama_0.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_1
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[1]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[1:1])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_1.address_width = 4,
		lutrama_1.data_width = 1,
		lutrama_1.first_address = 0,
		lutrama_1.first_bit_number = 1,
		lutrama_1.last_address = 15,
		lutrama_1.logical_ram_depth = 16,
		lutrama_1.logical_ram_name = "altdpram_instance",
		lutrama_1.logical_ram_width = 9,
		lutrama_1.mixed_port_feed_through_mode = "dont_care",
		lutrama_1.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_2
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[2]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[2:2])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_2.address_width = 4,
		lutrama_2.data_width = 1,
		lutrama_2.first_address = 0,
		lutrama_2.first_bit_number = 2,
		lutrama_2.last_address = 15,
		lutrama_2.logical_ram_depth = 16,
		lutrama_2.logical_ram_name = "altdpram_instance",
		lutrama_2.logical_ram_width = 9,
		lutrama_2.mixed_port_feed_through_mode = "dont_care",
		lutrama_2.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_3
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[3]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[3:3])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_3.address_width = 4,
		lutrama_3.data_width = 1,
		lutrama_3.first_address = 0,
		lutrama_3.first_bit_number = 3,
		lutrama_3.last_address = 15,
		lutrama_3.logical_ram_depth = 16,
		lutrama_3.logical_ram_name = "altdpram_instance",
		lutrama_3.logical_ram_width = 9,
		lutrama_3.mixed_port_feed_through_mode = "dont_care",
		lutrama_3.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_4
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[4]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[4:4])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_4.address_width = 4,
		lutrama_4.data_width = 1,
		lutrama_4.first_address = 0,
		lutrama_4.first_bit_number = 4,
		lutrama_4.last_address = 15,
		lutrama_4.logical_ram_depth = 16,
		lutrama_4.logical_ram_name = "altdpram_instance",
		lutrama_4.logical_ram_width = 9,
		lutrama_4.mixed_port_feed_through_mode = "dont_care",
		lutrama_4.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_5
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[5]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[5:5])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_5.address_width = 4,
		lutrama_5.data_width = 1,
		lutrama_5.first_address = 0,
		lutrama_5.first_bit_number = 5,
		lutrama_5.last_address = 15,
		lutrama_5.logical_ram_depth = 16,
		lutrama_5.logical_ram_name = "altdpram_instance",
		lutrama_5.logical_ram_width = 9,
		lutrama_5.mixed_port_feed_through_mode = "dont_care",
		lutrama_5.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_6
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[6]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[6:6])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_6.address_width = 4,
		lutrama_6.data_width = 1,
		lutrama_6.first_address = 0,
		lutrama_6.first_bit_number = 6,
		lutrama_6.last_address = 15,
		lutrama_6.logical_ram_depth = 16,
		lutrama_6.logical_ram_name = "altdpram_instance",
		lutrama_6.logical_ram_width = 9,
		lutrama_6.mixed_port_feed_through_mode = "dont_care",
		lutrama_6.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_7
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[7]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[7:7])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_7.address_width = 4,
		lutrama_7.data_width = 1,
		lutrama_7.first_address = 0,
		lutrama_7.first_bit_number = 7,
		lutrama_7.last_address = 15,
		lutrama_7.logical_ram_depth = 16,
		lutrama_7.logical_ram_name = "altdpram_instance",
		lutrama_7.logical_ram_width = 9,
		lutrama_7.mixed_port_feed_through_mode = "dont_care",
		lutrama_7.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_8
	( 
	.clk0(inclock),
	.ena0(wr_en),
	.portaaddr(wraddr_wire[3:0]),
	.portadatain(datain_wire[8]),
	.portbaddr(rdaddr_wire[3:0]),
	.portbdataout(wire_lutrama_portbdataout[8:8])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_8.address_width = 4,
		lutrama_8.data_width = 1,
		lutrama_8.first_address = 0,
		lutrama_8.first_bit_number = 8,
		lutrama_8.last_address = 15,
		lutrama_8.logical_ram_depth = 16,
		lutrama_8.logical_ram_name = "altdpram_instance",
		lutrama_8.logical_ram_width = 9,
		lutrama_8.mixed_port_feed_through_mode = "dont_care",
		lutrama_8.lpm_type = "stratixiv_mlab_cell";
	assign
		datain_wire = datain_reg,
		dataout_wire = wire_lutrama_portbdataout,
		q = dataout_wire,
		rdaddr_wire = rdaddress,
		wr_en = wren,
		wraddr_wire = wraddr_reg;
endmodule //spwc_data_dc_fifo_dpram


//dffpipe DELAY=2 WIDTH=1 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=S102
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=S102"} *)
module  spwc_data_dc_fifo_dffpipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [0:0]  d;
	output   [0:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[0:0]	dffe10a;
	reg	[0:0]	dffe9a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe10a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe10a <= {1{1'b1}};
		else if (clrn == 1'b0) dffe10a <= 1'b0;
		else if  (ena == 1'b1)   dffe10a <= (dffe9a & (~ sclr));
	// synopsys translate_off
	initial
		dffe9a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe9a <= {1{1'b1}};
		else if (clrn == 1'b0) dffe9a <= 1'b0;
		else if  (ena == 1'b1)   dffe9a <= (d & (~ sclr));
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe10a,
		sclr = 1'b0;
endmodule //spwc_data_dc_fifo_dffpipe


//dffpipe DELAY=1 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 5 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  spwc_data_dc_fifo_dffpipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe11a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe11a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe11a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe11a <= 5'b0;
		else if  (ena == 1'b1)   dffe11a <= (d & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe11a,
		sclr = 1'b0;
endmodule //spwc_data_dc_fifo_dffpipe1


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_a_graycounter 2018:09:12:13:04:24:SJ cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_gray_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_dcfifo 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  spwc_data_dc_fifo_dffpipe12
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe13a;
	reg	[4:0]	dffe14a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe13a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe13a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe13a <= 5'b0;
		else if  (ena == 1'b1)   dffe13a <= (d & {5{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe14a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe14a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe14a <= 5'b0;
		else if  (ena == 1'b1)   dffe14a <= (dffe13a & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe14a,
		sclr = 1'b0;
endmodule //spwc_data_dc_fifo_dffpipe12

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW"} *)
module  spwc_data_dc_fifo_alt_synch_pipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_dffpipe12_q;

	spwc_data_dc_fifo_dffpipe12   dffpipe12
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe12_q));
	assign
		q = wire_dffpipe12_q;
endmodule //spwc_data_dc_fifo_alt_synch_pipe


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW
//VERSION_BEGIN 18.1 cbx_a_gray2bin 2018:09:12:13:04:24:SJ cbx_a_graycounter 2018:09:12:13:04:24:SJ cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_gray_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_dcfifo 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 18.1 cbx_mgl 2018:09:12:13:10:36:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  spwc_data_dc_fifo_dffpipe123
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe16a;
	reg	[4:0]	dffe17a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe16a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe16a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe16a <= 5'b0;
		else if  (ena == 1'b1)   dffe16a <= (d & {5{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe17a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe17a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe17a <= 5'b0;
		else if  (ena == 1'b1)   dffe17a <= (dffe16a & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe17a,
		sclr = 1'b0;
endmodule //spwc_data_dc_fifo_dffpipe123

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW"} *)
module  spwc_data_dc_fifo_alt_synch_pipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_dffpipe15_q;

	spwc_data_dc_fifo_dffpipe123   dffpipe15
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe15_q));
	assign
		q = wire_dffpipe15_q;
endmodule //spwc_data_dc_fifo_alt_synch_pipe1


//lpm_add_sub DEVICE_FAMILY="Stratix IV" LPM_DIRECTION="SUB" LPM_WIDTH=5 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix IV" LPM_DIRECTION="SUB" LPM_WIDTH=5 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Stratix IV" LPM_WIDTH=5 aeb dataa datab
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  spwc_data_dc_fifo_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [4:0]  dataa;
	input   [4:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [4:0]  dataa;
	tri0   [4:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [12:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = ((data_wire[0] | data_wire[1]) | data_wire[2]),
		data_wire = {datab[4], dataa[4], datab[3], dataa[3], datab[2], dataa[2], datab[1], dataa[1], datab[0], dataa[0], (data_wire[11] ^ data_wire[12]), ((data_wire[7] ^ data_wire[8]) | (data_wire[9] ^ data_wire[10])), ((data_wire[3] ^ data_wire[4]) | (data_wire[5] ^ data_wire[6]))},
		eq_wire = aeb_result_wire;
endmodule //spwc_data_dc_fifo_cmpr

//synthesis_resources = lut 12 MLAB 1 reg 85 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 2;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;suppress_da_rule_internal=R105;-name CUT ON -from rdptr_g -to ws_dgrp|spwc_data_dc_fifo_dffpipe123:dffpipe15|dffe16a;-name SDC_STATEMENT \"set_false_path -from *rdptr_g* -to *ws_dgrp|spwc_data_dc_fifo_dffpipe123:dffpipe15|dffe16a* \";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|spwc_data_dc_fifo_dffpipe12:dffpipe12|dffe13a;-name SDC_STATEMENT \"set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|spwc_data_dc_fifo_dffpipe12:dffpipe12|dffe13a* \""} *)
module  spwc_data_dc_fifo_dcfifo
	( 
	aclr,
	data,
	q,
	rdclk,
	rdempty,
	rdreq,
	rdusedw,
	wrclk,
	wrfull,
	wrreq,
	wrusedw) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   [8:0]  data;
	output   [8:0]  q;
	input   rdclk;
	output   rdempty;
	input   rdreq;
	output   [3:0]  rdusedw;
	input   wrclk;
	output   wrfull;
	input   wrreq;
	output   [3:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_rdptr_g_gray2bin_bin;
	wire  [4:0]   wire_rs_dgwp_gray2bin_bin;
	wire  [4:0]   wire_wrptr_g_gray2bin_bin;
	wire  [4:0]   wire_ws_dgrp_gray2bin_bin;
	wire  [4:0]   wire_rdptr_g1p_q;
	wire  [4:0]   wire_wrptr_g1p_q;
	wire  [8:0]   wire_fifo_lutram_q;
	reg	[4:0]	delayed_wrptr_g;
	reg	[4:0]	rdptr_g;
	reg	[0:0]	rdptr_g1p_dffe;
	(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=S102;POWER_UP_LEVEL=LOW"} *)
	reg	[4:0]	wrptr_g;
	wire  [0:0]   wire_rdaclr_q;
	wire  [4:0]   wire_rs_brp_q;
	wire  [4:0]   wire_rs_bwp_q;
	wire  [4:0]   wire_rs_dgwp_q;
	wire  [0:0]   wire_wraclr_q;
	wire  [4:0]   wire_ws_brp_q;
	wire  [4:0]   wire_ws_bwp_q;
	wire  [4:0]   wire_ws_dgrp_q;
	wire	[4:0]	wire_rdusedw_sub_dataa;
	wire	[4:0]	wire_rdusedw_sub_datab;
	wire	[4:0]	wire_rdusedw_sub_result;
	wire	[4:0]	wire_wrusedw_sub_dataa;
	wire	[4:0]	wire_wrusedw_sub_datab;
	wire	[4:0]	wire_wrusedw_sub_result;
	wire  wire_rdempty_eq_comp_aeb;
	wire  wire_wrfull_eq_comp_aeb;
	wire  int_rdempty;
	wire  int_wrfull;
	wire  [3:0]  ram_rdaddress;
	wire  [3:0]  ram_wraddress;
	wire  [0:0]  temp_read;
	wire  valid_rdreq;
	wire  valid_wrreq;
	wire  [4:0]  wrptr_gs;

	spwc_data_dc_fifo_a_gray2bin   rdptr_g_gray2bin
	( 
	.bin(wire_rdptr_g_gray2bin_bin),
	.gray(rdptr_g[4:0]));
	spwc_data_dc_fifo_a_gray2bin   rs_dgwp_gray2bin
	( 
	.bin(wire_rs_dgwp_gray2bin_bin),
	.gray(wire_rs_dgwp_q[4:0]));
	spwc_data_dc_fifo_a_gray2bin   wrptr_g_gray2bin
	( 
	.bin(wire_wrptr_g_gray2bin_bin),
	.gray(wrptr_g[4:0]));
	spwc_data_dc_fifo_a_gray2bin   ws_dgrp_gray2bin
	( 
	.bin(wire_ws_dgrp_gray2bin_bin),
	.gray(wire_ws_dgrp_q[4:0]));
	spwc_data_dc_fifo_a_graycounter   rdptr_g1p
	( 
	.aclr((~ wire_rdaclr_q)),
	.clock(rdclk),
	.cnt_en(valid_rdreq),
	.q(wire_rdptr_g1p_q));
	spwc_data_dc_fifo_a_graycounter1   wrptr_g1p
	( 
	.aclr((~ wire_wraclr_q)),
	.clock(wrclk),
	.cnt_en(valid_wrreq),
	.q(wire_wrptr_g1p_q));
	spwc_data_dc_fifo_dpram   fifo_lutram
	( 
	.data(data),
	.inclock(wrclk),
	.outclock(rdclk),
	.q(wire_fifo_lutram_q),
	.rdaddress(ram_rdaddress),
	.wraddress(ram_wraddress),
	.wren(valid_wrreq));
	// synopsys translate_off
	initial
		delayed_wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  negedge wire_wraclr_q)
		if (wire_wraclr_q == 1'b0) delayed_wrptr_g <= 5'b0;
		else  delayed_wrptr_g <= wrptr_g;
	// synopsys translate_off
	initial
		rdptr_g = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  negedge wire_rdaclr_q)
		if (wire_rdaclr_q == 1'b0) rdptr_g <= 5'b0;
		else if  (valid_rdreq == 1'b1)   rdptr_g <= wire_rdptr_g1p_q;
	// synopsys translate_off
	initial
		rdptr_g1p_dffe = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  negedge wire_rdaclr_q)
		if (wire_rdaclr_q == 1'b0) rdptr_g1p_dffe <= 1'b0;
		else if  (valid_rdreq == 1'b1)   rdptr_g1p_dffe <= temp_read;
	// synopsys translate_off
	initial
		wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  negedge wire_wraclr_q)
		if (wire_wraclr_q == 1'b0) wrptr_g <= 5'b0;
		else if  (valid_wrreq == 1'b1)   wrptr_g <= wire_wrptr_g1p_q;
	spwc_data_dc_fifo_dffpipe   rdaclr
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(1'b1),
	.q(wire_rdaclr_q));
	spwc_data_dc_fifo_dffpipe1   rs_brp
	( 
	.clock(rdclk),
	.clrn(wire_rdaclr_q),
	.d(wire_rdptr_g_gray2bin_bin),
	.q(wire_rs_brp_q));
	spwc_data_dc_fifo_dffpipe1   rs_bwp
	( 
	.clock(rdclk),
	.clrn(wire_rdaclr_q),
	.d(wire_rs_dgwp_gray2bin_bin),
	.q(wire_rs_bwp_q));
	spwc_data_dc_fifo_alt_synch_pipe   rs_dgwp
	( 
	.clock(rdclk),
	.clrn(wire_rdaclr_q),
	.d(delayed_wrptr_g),
	.q(wire_rs_dgwp_q));
	spwc_data_dc_fifo_dffpipe   wraclr
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(1'b1),
	.q(wire_wraclr_q));
	spwc_data_dc_fifo_dffpipe1   ws_brp
	( 
	.clock(wrclk),
	.clrn(wire_wraclr_q),
	.d(wire_ws_dgrp_gray2bin_bin),
	.q(wire_ws_brp_q));
	spwc_data_dc_fifo_dffpipe1   ws_bwp
	( 
	.clock(wrclk),
	.clrn(wire_wraclr_q),
	.d(wire_wrptr_g_gray2bin_bin),
	.q(wire_ws_bwp_q));
	spwc_data_dc_fifo_alt_synch_pipe1   ws_dgrp
	( 
	.clock(wrclk),
	.clrn(wire_wraclr_q),
	.d(rdptr_g),
	.q(wire_ws_dgrp_q));
	assign
		wire_rdusedw_sub_result = wire_rdusedw_sub_dataa - wire_rdusedw_sub_datab;
	assign
		wire_rdusedw_sub_dataa = wire_rs_bwp_q,
		wire_rdusedw_sub_datab = wire_rs_brp_q;
	assign
		wire_wrusedw_sub_result = wire_wrusedw_sub_dataa - wire_wrusedw_sub_datab;
	assign
		wire_wrusedw_sub_dataa = wire_ws_bwp_q,
		wire_wrusedw_sub_datab = wire_ws_brp_q;
	spwc_data_dc_fifo_cmpr   rdempty_eq_comp
	( 
	.aeb(wire_rdempty_eq_comp_aeb),
	.dataa(wire_rs_dgwp_q),
	.datab(rdptr_g));
	spwc_data_dc_fifo_cmpr   wrfull_eq_comp
	( 
	.aeb(wire_wrfull_eq_comp_aeb),
	.dataa(wire_ws_dgrp_q),
	.datab(wrptr_gs));
	assign
		int_rdempty = wire_rdempty_eq_comp_aeb,
		int_wrfull = wire_wrfull_eq_comp_aeb,
		q = wire_fifo_lutram_q,
		ram_rdaddress = {rdptr_g1p_dffe, rdptr_g[2:0]},
		ram_wraddress = {(wrptr_g[4] ^ wrptr_g[3]), wrptr_g[2:0]},
		rdempty = int_rdempty,
		rdusedw = {wire_rdusedw_sub_result[3:0]},
		temp_read = (wire_rdptr_g1p_q[4] ^ wire_rdptr_g1p_q[3]),
		valid_rdreq = (rdreq & (~ (int_rdempty | (~ wire_rdaclr_q)))),
		valid_wrreq = (wrreq & (~ (int_wrfull | (~ wire_wraclr_q)))),
		wrfull = (int_wrfull | (~ wire_wraclr_q)),
		wrptr_gs = {(~ wrptr_g[4]), (~ wrptr_g[3]), wrptr_g[2:0]},
		wrusedw = {wire_wrusedw_sub_result[3:0]};
endmodule //spwc_data_dc_fifo_dcfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module spwc_data_dc_fifo (
	aclr,
	data,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	q,
	rdempty,
	rdusedw,
	wrfull,
	wrusedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	[8:0]  data;
	input	  rdclk;
	input	  rdreq;
	input	  wrclk;
	input	  wrreq;
	output	[8:0]  q;
	output	  rdempty;
	output	[3:0]  rdusedw;
	output	  wrfull;
	output	[3:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	  aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [8:0] sub_wire0;
	wire  sub_wire1;
	wire [3:0] sub_wire2;
	wire  sub_wire3;
	wire [3:0] sub_wire4;
	wire [8:0] q = sub_wire0[8:0];
	wire  rdempty = sub_wire1;
	wire [3:0] rdusedw = sub_wire2[3:0];
	wire  wrfull = sub_wire3;
	wire [3:0] wrusedw = sub_wire4[3:0];

	spwc_data_dc_fifo_dcfifo	spwc_data_dc_fifo_dcfifo_component (
				.aclr (aclr),
				.data (data),
				.rdclk (rdclk),
				.rdreq (rdreq),
				.wrclk (wrclk),
				.wrreq (wrreq),
				.q (sub_wire0),
				.rdempty (sub_wire1),
				.rdusedw (sub_wire2),
				.wrfull (sub_wire3),
				.wrusedw (sub_wire4));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "0"
// Retrieval info: PRIVATE: Clock NUMERIC "4"
// Retrieval info: PRIVATE: Depth NUMERIC "16"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "0"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "9"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "9"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "1"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=MLAB"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "16"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "ON"
// Retrieval info: CONSTANT: LPM_TYPE STRING "dcfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "9"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "4"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: RDSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: CONSTANT: READ_ACLR_SYNCH STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: CONSTANT: WRITE_ACLR_SYNCH STRING "ON"
// Retrieval info: CONSTANT: WRSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT GND "aclr"
// Retrieval info: USED_PORT: data 0 0 9 0 INPUT NODEFVAL "data[8..0]"
// Retrieval info: USED_PORT: q 0 0 9 0 OUTPUT NODEFVAL "q[8..0]"
// Retrieval info: USED_PORT: rdclk 0 0 0 0 INPUT NODEFVAL "rdclk"
// Retrieval info: USED_PORT: rdempty 0 0 0 0 OUTPUT NODEFVAL "rdempty"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: rdusedw 0 0 4 0 OUTPUT NODEFVAL "rdusedw[3..0]"
// Retrieval info: USED_PORT: wrclk 0 0 0 0 INPUT NODEFVAL "wrclk"
// Retrieval info: USED_PORT: wrfull 0 0 0 0 OUTPUT NODEFVAL "wrfull"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: USED_PORT: wrusedw 0 0 4 0 OUTPUT NODEFVAL "wrusedw[3..0]"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 9 0 data 0 0 9 0
// Retrieval info: CONNECT: @rdclk 0 0 0 0 rdclk 0 0 0 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrclk 0 0 0 0 wrclk 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: q 0 0 9 0 @q 0 0 9 0
// Retrieval info: CONNECT: rdempty 0 0 0 0 @rdempty 0 0 0 0
// Retrieval info: CONNECT: rdusedw 0 0 4 0 @rdusedw 0 0 4 0
// Retrieval info: CONNECT: wrfull 0 0 0 0 @wrfull 0 0 0 0
// Retrieval info: CONNECT: wrusedw 0 0 4 0 @wrusedw 0 0 4 0
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL spwc_data_dc_fifo_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
